<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="br-pt"
 lang="br-pt" dir="ltr">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>br-pt:data_types</title>
<meta name="generator" content="DokuWiki Release 2009-12-25c &quot;Lemming&quot;" />
<meta name="robots" content="index,follow" />
<meta name="date" content="2009-12-19T12:14:46-0800" />
<meta name="keywords" content="br-pt,data_types" />
<link rel="search" type="application/opensearchdescription+xml" href="http://www.cppreference.com/wiki/lib/exe/opensearch.php" title="C++ Reference" />
<link rel="start" href="../index.html" />
<link rel="contents" href="http://www.cppreference.com/wiki/br-pt/data_types?do=index" title="Index" />
<link rel="alternate" type="application/rss+xml" title="Recent Changes" href="http://www.cppreference.com/wiki/feed.php" />
<link rel="alternate" type="application/rss+xml" title="Current Namespace" href="http://www.cppreference.com/wiki/feed.php?mode=list&amp;ns=br-pt" />
<link rel="alternate" type="text/html" title="Plain HTML" href="http://www.cppreference.com/wiki/_export/xhtml/br-pt/data_types" />
<link rel="alternate" type="text/plain" title="Wiki Markup" href="http://www.cppreference.com/wiki/_export/raw/br-pt/data_types" />
<link rel="canonical" href="data_types" />
<link rel="stylesheet" media="all" type="text/css" href="../lib/exe/css.php@s=all&amp;t=custom1&amp;tseed=1265723194" />
<link rel="stylesheet" media="screen" type="text/css" href="../lib/exe/css.php@t=custom1&amp;tseed=1265723194" />
<link rel="stylesheet" media="print" type="text/css" href="../lib/exe/css.php@s=print&amp;t=custom1&amp;tseed=1265723194" />
<script type="text/javascript" charset="utf-8" ><!--//--><![CDATA[//><!--
var NS='br-pt';var JSINFO = {"id":"br-pt:data_types","namespace":"br-pt"};
//--><!]]></script>
<script type="text/javascript" charset="utf-8" src="../lib/exe/js.php@tseed=1265723194" ></script>
</head>
<body>
<div class="dokuwiki export">
<!-- TOC START -->
<div class="toc">
<div class="tocheader toctoggle" id="toc__header">Table of Contents</div>
<div id="toc__inside">

<ul class="toc">
<li class="clear">

<ul class="toc">
<li class="level2"><div class="li"><span class="li"><a href="data_types#tipos_de_dados_do_c" class="toc">Tipos de Dados do C++</a></span></div>
<ul class="toc">
<li class="level3"><div class="li"><span class="li"><a href="data_types#modificadores_de_tipos" class="toc">Modificadores de Tipos</a></span></div></li>
<li class="level3"><div class="li"><span class="li"><a href="data_types#tipos_de_tamanho_e_intervalos" class="toc">Tipos de tamanho e intervalos</a></span></div></li>
<li class="level3"><div class="li"><span class="li"><a href="data_types#reading_type_declarations" class="toc">Reading Type Declarations</a></span></div></li></ul>
</li></ul>
</li></ul>
</div>
</div>
<!-- TOC END -->



<h2><a name="tipos_de_dados_do_c" id="tipos_de_dados_do_c">Tipos de Dados do C++</a></h2>
<div class="level2">

<p>

Programadores de C++ tem acesso, ou podem se utilizar, dos 5 tipos de dados do C: &#039;void&#039;, &#039;int&#039;, &#039;float&#039;, &#039;double&#039; e &#039;char&#039;.

</p>
<table class="inline">
	<tr class="row0">
		<th class="col0">Tipo</th><th class="col1">Descrição</th>
	</tr>
	<tr class="row1">
		<td class="col0">void</td><td class="col1">não é associado a nenhum tipo de dado</td>
	</tr>
	<tr class="row2">
		<td class="col0">int</td><td class="col1">número inteiro</td>
	</tr>
	<tr class="row3">
		<td class="col0">float</td><td class="col1">número fracionário (“ponto flutuante”)</td>
	</tr>
	<tr class="row4">
		<td class="col0">double</td><td class="col1">número fracionário de precisão dupla</td>
	</tr>
	<tr class="row5">
		<td class="col0">char</td><td class="col1">caractere</td>
	</tr>
</table>

<p>

Além destes, o C++ define mais dois: &#039;bool&#039; e &#039;wchar_t&#039;.
</p>
<table class="inline">
	<tr class="row0">
		<th class="col0">Tipo</th><th class="col1">Descrição</th>
	</tr>
	<tr class="row1">
		<td class="col0">bool</td><td class="col1">Valor Booleano: &#039;true&#039; ou &#039;false&#039; (verdadeiro ou falso)</td>
	</tr>
	<tr class="row2">
		<td class="col0">wchar_t</td><td class="col1">caractere wide (?)</td>
	</tr>
</table>

</div>
<!-- SECTION "Tipos de Dados do C++" [1-534] -->
<h3><a name="modificadores_de_tipos" id="modificadores_de_tipos">Modificadores de Tipos</a></h3>
<div class="level3">

<p>

Vários desses tipos podem ser modificados usando-se as palavras-chave &#039;signed&#039;, &#039;unsigned&#039;, &#039;short&#039; e &#039;long&#039;. Quando um desses modificadores de tipo é usado sozinho (isto é, sem definir um tipo de dados), o tipo &#039;int&#039; é considerado. Isto é, se você definir uma váriavel usando apenas o modificador &#039;short&#039;, o compilador vai interpretar como &#039;short int&#039;. Uma lista completa dos tipos de dados possíveis segue abaixo (tipos equivalentes são mostrados na mesma linha):

</p>
<table class="inline">
	<tr class="row0">
		<th class="col0" colspan="4">tipos inteiros</th>
	</tr>
	<tr class="row1">
		<td class="col0" colspan="4">bool</td>
	</tr>
	<tr class="row2">
		<td class="col0" colspan="4">char</td>
	</tr>
	<tr class="row3">
		<td class="col0" colspan="4">signed char</td>
	</tr>
	<tr class="row4">
		<td class="col0" colspan="4">unsigned char</td>
	</tr>
	<tr class="row5">
		<td class="col0" colspan="4">wchar_t</td>
	</tr>
	<tr class="row6">
		<td class="col0">short</td><td class="col1">short int</td><td class="col2">signed short</td><td class="col3">signed short int</td>
	</tr>
	<tr class="row7">
		<td class="col0" colspan="2">unsigned short</td><td class="col2" colspan="2">unsigned short int</td>
	</tr>
	<tr class="row8">
		<td class="col0">int</td><td class="col1">signed</td><td class="col2" colspan="2">signed int</td>
	</tr>
	<tr class="row9">
		<td class="col0" colspan="2">unsigned</td><td class="col2" colspan="2">unsigned int</td>
	</tr>
	<tr class="row10">
		<td class="col0">long</td><td class="col1">long int</td><td class="col2">signed long</td><td class="col3">signed long int</td>
	</tr>
	<tr class="row11">
		<td class="col0" colspan="2">unsigned long</td><td class="col2" colspan="2">unsigned long int</td>
	</tr>
	<tr class="row12">
		<th class="col0" colspan="4">tipos fracionários</th>
	</tr>
	<tr class="row13">
		<td class="col0" colspan="4">float</td>
	</tr>
	<tr class="row14">
		<td class="col0" colspan="4">double</td>
	</tr>
	<tr class="row15">
		<td class="col0" colspan="4">long double</td>
	</tr>
</table>
<table class="inline">
	<tr class="row0">
		<th class="col0" colspan="4">tipos inteiros com suporte opcional</th>
	</tr>
	<tr class="row1">
		<td class="col0">long long</td><td class="col1">long long int</td><td class="col2">signed long long</td><td class="col3">signed long long int</td>
	</tr>
	<tr class="row2">
		<td class="col0" colspan="2">unsigned long long</td><td class="col2" colspan="2">unsigned long long int</td>
	</tr>
</table>

</div>
<!-- SECTION "Modificadores de Tipos" [535-1566] -->
<h3><a name="tipos_de_tamanho_e_intervalos" id="tipos_de_tamanho_e_intervalos">Tipos de tamanho e intervalos</a></h3>
<div class="level3">

<p>

O tamanho eo intervalo de qualquer tipo de dados é compilador e dependente da arquitetura. Você pode usar o operador <a href="../keywords/sizeof" class="wikilink1" title="keywords:sizeof">sizeof</a> para determinar o tamanho de qualquer tipo de dados (Expresso com um número de bytes). No entanto, muitas arquiteturas implementar os tipos de dados de um tamanho padrão. ints e floats são muitas vezes de 32 bits, chars 8-bit, e doubles são normalmente 64-bit. booleanos são freqüentemente implementados como tipos de dados 8-bit. Tipo long long é 64-bit. O header do arquivo “cfloat” (ou “float.h”), define os intervalos para os tipos de ponto flutuante, o “climits” (ou “limits.h”) - para os tipos inteiros.
</p>

<p>
Limits for numeric values are defined in the &lt;limits&gt; header. The templated values of <a href="../limits/numeric_limits" class="wikilink1" title="limits:numeric_limits">numeric_limits</a> provide system-dependant numerical representations of the C++ data types. Use the appropriate function given the data type as the template argument as shown in the table below. Note that numeric_limits can be overloaded for user-defined types as well.

</p>
<table class="inline">
	<tr class="row0">
		<th class="col0">Method or<br/>
constant</th><th class="col1">Return</th><th class="col2">Description</th>
	</tr>
	<tr class="row1">
		<td class="col0">is_specialized</td><td class="col1">bool</td><td class="col2"> </td>
	</tr>
	<tr class="row2">
		<td class="col0">radix</td><td class="col1">int</td><td class="col2">base of exponent</td>
	</tr>
	<tr class="row3">
		<td class="col0">digits</td><td class="col1">int</td><td class="col2">number of radix digits in mantissa</td>
	</tr>
	<tr class="row4">
		<td class="col0">digits10</td><td class="col1">int</td><td class="col2">number of base 10 digits in mantissa</td>
	</tr>
	<tr class="row5">
		<td class="col0">is_signed</td><td class="col1">bool</td><td class="col2"> </td>
	</tr>
	<tr class="row6">
		<td class="col0">is_integer</td><td class="col1">bool</td><td class="col2"> </td>
	</tr>
	<tr class="row7">
		<td class="col0">is_exact</td><td class="col1">bool</td><td class="col2"> </td>
	</tr>
	<tr class="row8">
		<td class="col0">min()</td><td class="col1">&lt;type&gt;</td><td class="col2">smallest number that can be respresented (not the most negative)</td>
	</tr>
	<tr class="row9">
		<td class="col0">max()</td><td class="col1">&lt;type&gt;</td><td class="col2">largest number</td>
	</tr>
	<tr class="row10">
		<td class="col0">epsilon()</td><td class="col1">&lt;type&gt;</td><td class="col2">inherent representation error value</td>
	</tr>
	<tr class="row11">
		<td class="col0">round_error()</td><td class="col1">&lt;type&gt;</td><td class="col2">maximum rounding adjustment possible</td>
	</tr>
	<tr class="row12">
		<td class="col0">infinity()</td><td class="col1">&lt;type&gt;</td><td class="col2"> </td>
	</tr>
	<tr class="row13">
		<td class="col0">quiet_NaN()</td><td class="col1">&lt;type&gt;</td><td class="col2">invalid number that does not signal floating point error</td>
	</tr>
	<tr class="row14">
		<td class="col0">signaling_NaN()</td><td class="col1">&lt;type&gt;</td><td class="col2">invalid number that signals floating point error</td>
	</tr>
	<tr class="row15">
		<td class="col0">denorm_min()</td><td class="col1">&lt;type&gt;</td><td class="col2"> </td>
	</tr>
	<tr class="row16">
		<td class="col0">min_exponent</td><td class="col1">int</td><td class="col2"> </td>
	</tr>
	<tr class="row17">
		<td class="col0">min_exponent10</td><td class="col1">int</td><td class="col2"> </td>
	</tr>
	<tr class="row18">
		<td class="col0">max_exponent</td><td class="col1">int</td><td class="col2"> </td>
	</tr>
	<tr class="row19">
		<td class="col0">max_exponent10</td><td class="col1">int</td><td class="col2"> </td>
	</tr>
	<tr class="row20">
		<td class="col0">has_infinity</td><td class="col1">bool</td><td class="col2"> </td>
	</tr>
	<tr class="row21">
		<td class="col0">has_quiet_NaN</td><td class="col1">bool</td><td class="col2"> </td>
	</tr>
	<tr class="row22">
		<td class="col0">has_signaling_NaN</td><td class="col1">bool</td><td class="col2"> </td>
	</tr>
	<tr class="row23">
		<td class="col0">has_denorm</td><td class="col1">&lt;type&gt;_denorm_style</td><td class="col2"> </td>
	</tr>
	<tr class="row24">
		<td class="col0">has_denorm_loss</td><td class="col1">bool</td><td class="col2"> </td>
	</tr>
	<tr class="row25">
		<td class="col0">is_iec559</td><td class="col1">bool</td><td class="col2">conforms to IEC-559</td>
	</tr>
	<tr class="row26">
		<td class="col0">is_bounded</td><td class="col1">bool</td><td class="col2"> </td>
	</tr>
	<tr class="row27">
		<td class="col0">is_modulo</td><td class="col1">bool</td><td class="col2"> </td>
	</tr>
	<tr class="row28">
		<td class="col0">traps</td><td class="col1">bool</td><td class="col2"> </td>
	</tr>
	<tr class="row29">
		<td class="col0">tinyness_before</td><td class="col1">bool</td><td class="col2"> </td>
	</tr>
	<tr class="row30">
		<td class="col0">round_style</td><td class="col1">float_round_style { round_to_nearest, … }</td><td class="col2"> </td>
	</tr>
</table>

<p>

The most common usage is in bounds checking, to determine the minimum and maximum values a data type can hold. The following code prints out the minimum and maximum values for a short on the system it is run.

</p>
<pre class="c code c++" style="font-family:monospace;">  <span class="co2">#include &lt;limits&gt;</span>
  std<span class="sy0">::</span><a href="http://www.opengroup.org/onlinepubs/009695399/functions/cout.html"><span class="kw3">cout</span></a> <span class="sy0">&lt;&lt;</span> <span class="st0">&quot;Maximum short value: &quot;</span> <span class="sy0">&lt;&lt;</span> std<span class="sy0">::</span><span class="me2">numeric_limits</span><span class="sy0">&lt;</span>short<span class="sy0">&gt;::</span><span class="me2">max</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">&lt;&lt;</span> std<span class="sy0">::</span><span class="me2">endl</span><span class="sy0">;</span>
  std<span class="sy0">::</span><a href="http://www.opengroup.org/onlinepubs/009695399/functions/cout.html"><span class="kw3">cout</span></a> <span class="sy0">&lt;&lt;</span> <span class="st0">&quot;Minimum short value: &quot;</span> <span class="sy0">&lt;&lt;</span> std<span class="sy0">::</span><span class="me2">numeric_limits</span><span class="sy0">&lt;</span>short<span class="sy0">&gt;::</span><span class="me2">min</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">&lt;&lt;</span> std<span class="sy0">::</span><span class="me2">endl</span><span class="sy0">;</span></pre>
</div>
<!-- SECTION "Tipos de tamanho e intervalos" [1567-4124] -->
<h3><a name="reading_type_declarations" id="reading_type_declarations">Reading Type Declarations</a></h3>
<div class="level3">

<p>

Simple type declarations are easy to understand:
</p>
<pre class="c code c++" style="font-family:monospace;">  <span class="kw4">int</span> i</pre>
<p>
However, it can be tricky to parse more complicated type declarations:
</p>
<pre class="c code c++" style="font-family:monospace;">  <span class="kw4">double</span> <span class="sy0">**</span>d<span class="br0">&#91;</span><span class="nu0">8</span><span class="br0">&#93;</span>              <span class="co1">// hmm...</span>
  <span class="kw4">char</span> <span class="sy0">*</span><span class="br0">&#40;</span><span class="sy0">*</span><span class="br0">&#40;</span><span class="sy0">**</span>foo <span class="br0">&#91;</span><span class="br0">&#93;</span><span class="br0">&#91;</span><span class="nu0">8</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#91;</span><span class="br0">&#93;</span> <span class="co1">// augh! what is foo?</span></pre>
<p>
To understand the above declarations, follow three rules:

</p>
<ol>
<li class="level1"><div class="li"> Start at the variable name (<code>d</code> or <code>foo</code> in the examples above)</div>
</li>
<li class="level1"><div class="li"> End with the data type (<code>double</code> or <code>char</code> above)</div>
</li>
<li class="level1"><div class="li"> Go right when you can, and left when you must.  (Grouping parentheses can cause you to bounce left.)</div>
</li>
</ol>

<p>

For example:

</p>
<table class="inline">
	<tr class="row0">
		<th class="col0">Expression</th><th class="col1">Meaning</th>
	</tr>
	<tr class="row1">
		<td class="col0"> <code>double **d[8];</code> </td><td class="col1"> </td>
	</tr>
	<tr class="row2">
		<td class="col0"> <code><del>double</del> **<del>d</del>[8];</code> </td><td class="col1"> <strong>d is … double</strong> </td>
	</tr>
	<tr class="row3">
		<td class="col0"> <code><del>double</del> **<del>d[8]</del>;</code> </td><td class="col1"> d is <strong>an array of 8</strong> … double </td>
	</tr>
	<tr class="row4">
		<td class="col0"> <code><del>double</del> *<del>*d[8]</del>;</code> </td><td class="col1"> d is an array of 8 <strong>pointer to</strong> … double </td>
	</tr>
	<tr class="row5">
		<td class="col0"> <code><del>double **d[8]</del>;</code> </td><td class="col1"> d is an array of 8 pointer to <strong>pointer to</strong> double </td>
	</tr>
</table>

<p>

Another example:

</p>
<table class="inline">
	<tr class="row0">
		<th class="col0">Expression</th><th class="col1">Meaning</th>
	</tr>
	<tr class="row1">
		<td class="col0"> <code>char *(*(**foo [][8])())[]</code> </td><td class="col1"> </td>
	</tr>
	<tr class="row2">
		<td class="col0"> <code><del>char</del> *(*(**<del>foo</del> [][8])())[]</code> </td><td class="col1"> <strong>foo is … char</strong> </td>
	</tr>
	<tr class="row3">
		<td class="col0"> <code><del>char</del> *(*(**<del>foo []</del>[8])())[]</code> </td><td class="col1"> foo is <strong>an array of</strong> … char </td>
	</tr>
	<tr class="row4">
		<td class="col0"> <code><del>char</del> *(*(**<del>foo [][8]</del>)())[]</code> </td><td class="col1"> foo is an array of <strong>an array of 8</strong> … char </td>
	</tr>
	<tr class="row5">
		<td class="col0"> <code><del>char</del> *(*(*<del>*foo [][8]</del>)())[]</code> </td><td class="col1"> foo is an array of an array of 8 <strong>pointer to</strong> … char </td>
	</tr>
	<tr class="row6">
		<td class="col0"> <code><del>char</del> *(*<del>(**foo [][8])</del>())[]</code> </td><td class="col1"> foo is an array of an array of 8 pointer to <strong>pointer to</strong> … char </td>
	</tr>
	<tr class="row7">
		<td class="col0"> <code><del>char</del> *(*<del>(**foo [][8])()</del>)[]</code> </td><td class="col1"> foo is an array of an array of 8 pointer to pointer to <strong>function returning</strong> … char </td>
	</tr>
	<tr class="row8">
		<td class="col0"> <code><del>char</del> *<del>(*(**foo [][8])())</del>[]</code> </td><td class="col1"> foo is an array of an array of 8 pointer to pointer to function returning <strong>pointer to</strong> … char </td>
	</tr>
	<tr class="row9">
		<td class="col0"> <code><del>char</del> *<del>(*(**foo [][8])())[]</del></code> </td><td class="col1"> foo is an array of an array of 8 pointer to pointer to function returning pointer to <strong>array of</strong> … char </td>
	</tr>
	<tr class="row10">
		<td class="col0"> <code><del>char *(*(**foo [][8])())[]</del></code> </td><td class="col1"> foo is an array of an array of 8 pointer to pointer to function returning pointer to array of <strong>pointer to</strong> char </td>
	</tr>
</table>

<p>

For a much more detailed explanation, see Steve Friedl&#039;s excellent description of how to read C declarations at <a href="http://www.unixwiz.net/techtips/reading-cdecl.html" class="urlextern" title="http://www.unixwiz.net/techtips/reading-cdecl.html"  rel="nofollow">http://www.unixwiz.net/techtips/reading-cdecl.html</a>.

</p>

</div>
<!-- SECTION "Reading Type Declarations" [4125-] --></div>
</body>
</html>
