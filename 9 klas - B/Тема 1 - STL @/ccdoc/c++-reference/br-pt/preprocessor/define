<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="br-pt"
 lang="br-pt" dir="ltr">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>br-pt:preprocessor:define</title>
<meta name="generator" content="DokuWiki Release 2009-12-25c &quot;Lemming&quot;" />
<meta name="robots" content="index,follow" />
<meta name="date" content="2009-11-05T16:30:19-0800" />
<meta name="keywords" content="br-pt,preprocessor,define" />
<link rel="search" type="application/opensearchdescription+xml" href="http://www.cppreference.com/wiki/lib/exe/opensearch.php" title="C++ Reference" />
<link rel="start" href="../../index.html" />
<link rel="contents" href="http://www.cppreference.com/wiki/br-pt/preprocessor/define?do=index" title="Index" />
<link rel="alternate" type="application/rss+xml" title="Recent Changes" href="http://www.cppreference.com/wiki/feed.php" />
<link rel="alternate" type="application/rss+xml" title="Current Namespace" href="http://www.cppreference.com/wiki/feed.php?mode=list&amp;ns=br-pt:preprocessor" />
<link rel="alternate" type="text/html" title="Plain HTML" href="http://www.cppreference.com/wiki/_export/xhtml/br-pt/preprocessor/define" />
<link rel="alternate" type="text/plain" title="Wiki Markup" href="http://www.cppreference.com/wiki/_export/raw/br-pt/preprocessor/define" />
<link rel="canonical" href="define" />
<link rel="stylesheet" media="all" type="text/css" href="../../lib/exe/css.php@s=all&amp;t=custom1&amp;tseed=1265723194" />
<link rel="stylesheet" media="screen" type="text/css" href="../../lib/exe/css.php@t=custom1&amp;tseed=1265723194" />
<link rel="stylesheet" media="print" type="text/css" href="../../lib/exe/css.php@s=print&amp;t=custom1&amp;tseed=1265723194" />
<script type="text/javascript" charset="utf-8" ><!--//--><![CDATA[//><!--
var NS='br-pt:preprocessor';var JSINFO = {"id":"br-pt:preprocessor:define","namespace":"br-pt:preprocessor"};
//--><!]]></script>
<script type="text/javascript" charset="utf-8" src="../../lib/exe/js.php@tseed=1265723194" ></script>
</head>
<body>
<div class="dokuwiki export">



<h2><a name="define" id="define">#define</a></h2>
<div class="level2">

<p>

Sintaxe:

</p>
<pre class="c code c++" style="font-family:monospace;">    <span class="co2">#define nome-da-macro cadeia-correspondente</span></pre>
<p>
O comando #define é utilizado para fazer substituições no decorrer do arquivo
em que está localizado. Em outras palavras, #define faz com que o compilador 
percorra o arquivo, substituindo cada ocorrência de nome-da-macro por
cadeia-correspondente (provenientes da definição colocada).
A cadeia colocada termina no final da linha.
</p>

<p>
Aqui há um exemplo típico de uso para um #define (em C):
</p>
<pre class="c code c++" style="font-family:monospace;">     <span class="co2">#define TRUE 1</span>
     <span class="co2">#define FALSE 0</span>
     ...
     <span class="kw4">int</span> done <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
     <span class="kw1">while</span><span class="br0">&#40;</span> done <span class="sy0">!=</span> TRUE <span class="br0">&#41;</span> <span class="br0">&#123;</span>
        ...
     <span class="br0">&#125;</span></pre>
<p>
Outra função do comando #define é que ele pode receber argumentos,
tornando-o uma poderosa ferramenta para criação de pseudo-funções.
Veja o código abaixo:
</p>
<pre class="c code c++" style="font-family:monospace;">     <span class="co2">#define absolute_value( x ) ( ((x) &lt; 0) ? -(x) : (x) )</span>
     ...
     <span class="kw4">int</span> num <span class="sy0">=</span> <span class="sy0">-</span><span class="nu0">1</span><span class="sy0">;</span>
     <span class="kw1">while</span><span class="br0">&#40;</span> absolute_value<span class="br0">&#40;</span> num <span class="br0">&#41;</span> <span class="br0">&#41;</span> <span class="br0">&#123;</span>
        ...
     <span class="br0">&#125;</span></pre>
<p>
Costuma ser uma boa idéia utilizar parênteses extras quanto macros complexas são criadas.
Note no exemplo acima que a variável “x” está sempre dentro do seu conjunto de parênteses.
Desta forma, ela será avaliada por inteiro, antes de ser comparada a 0 ou multiplicada por -1.
Além disto, a macro inteira é cercada por parênteses, prevenindo que seja contaminada por outro código.
Caso não seja tomado o cuidado devido, você correrá o risco fazer com que seu compilador interprete
erroneamente seu código.
Veja abaixo um exemplo de como o comando define pode ser utilizado para criar
um incrementador genérico que itera e imprime os inteiros de 1 a 20:
</p>
<pre class="c code c++" style="font-family:monospace;">   <span class="co2">#define count_up( v, low, high ) \
     for( (v) = (low); (v) &lt;= (high); (v)++ )</span>
&nbsp;
   ...
&nbsp;
   <span class="kw4">int</span> i<span class="sy0">;</span>
   count_up<span class="br0">&#40;</span> i<span class="sy0">,</span> 1<span class="sy0">,</span> 20 <span class="br0">&#41;</span> <span class="br0">&#123;</span>
     <a href="http://www.opengroup.org/onlinepubs/009695399/functions/printf.html"><span class="kw3">printf</span></a><span class="br0">&#40;</span> <span class="st0">&quot;i is %d<span class="es1">\n</span>&quot;</span><span class="sy0">,</span> i <span class="br0">&#41;</span><span class="sy0">;</span>
   <span class="br0">&#125;</span></pre>
<p>
Tópicos relacionados: <a href="http://www.cppreference.com/wiki/br-pt/preprocessor/sharp" class="wikilink2" title="br-pt:preprocessor:sharp" rel="nofollow"># and ##</a>, <a href="http://www.cppreference.com/wiki/br-pt/preprocessor/preprocessor_if" class="wikilink2" title="br-pt:preprocessor:preprocessor_if" rel="nofollow">#if,...,#endif</a>, <a href="http://www.cppreference.com/wiki/br-pt/preprocessor/undef" class="wikilink2" title="br-pt:preprocessor:undef" rel="nofollow">#undef</a>
</p>

</div>
</div>
</body>
</html>
