<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"
 lang="en" dir="ltr">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>c:io:printf</title>
<meta name="generator" content="DokuWiki Release 2009-12-25c &quot;Lemming&quot;" />
<meta name="robots" content="index,follow" />
<meta name="date" content="2009-12-03T06:47:49-0800" />
<meta name="keywords" content="c,io,printf" />
<link rel="search" type="application/opensearchdescription+xml" href="http://www.cppreference.com/wiki/lib/exe/opensearch.php" title="C++ Reference" />
<link rel="start" href="../../index.html" />
<link rel="contents" href="http://www.cppreference.com/wiki/c/io/printf?do=index" title="Index" />
<link rel="alternate" type="application/rss+xml" title="Recent Changes" href="http://www.cppreference.com/wiki/feed.php" />
<link rel="alternate" type="application/rss+xml" title="Current Namespace" href="http://www.cppreference.com/wiki/feed.php?mode=list&amp;ns=c:io" />
<link rel="alternate" type="text/html" title="Plain HTML" href="http://www.cppreference.com/wiki/_export/xhtml/c/io/printf" />
<link rel="alternate" type="text/plain" title="Wiki Markup" href="http://www.cppreference.com/wiki/_export/raw/c/io/printf" />
<link rel="canonical" href="printf" />
<link rel="stylesheet" media="all" type="text/css" href="../../lib/exe/css.php@s=all&amp;t=custom1&amp;tseed=1265723194" />
<link rel="stylesheet" media="screen" type="text/css" href="../../lib/exe/css.php@t=custom1&amp;tseed=1265723194" />
<link rel="stylesheet" media="print" type="text/css" href="../../lib/exe/css.php@s=print&amp;t=custom1&amp;tseed=1265723194" />
<script type="text/javascript" charset="utf-8" ><!--//--><![CDATA[//><!--
var NS='c:io';var JSINFO = {"id":"c:io:printf","namespace":"c:io"};
//--><!]]></script>
<script type="text/javascript" charset="utf-8" src="../../lib/exe/js.php@tseed=1265723194" ></script>
</head>
<body>
<div class="dokuwiki export">



<h2><a name="printf" id="printf">printf</a></h2>
<div class="level2">

<p>
Syntax:
</p>
<pre class="c code c++" style="font-family:monospace;">    <span class="co2">#include &lt;cstdio&gt;</span>
    <span class="kw4">int</span> <a href="http://www.opengroup.org/onlinepubs/009695399/functions/printf.html"><span class="kw3">printf</span></a><span class="br0">&#40;</span> <span class="kw4">const</span> <span class="kw4">char</span> <span class="sy0">*</span>format<span class="sy0">,</span> ... <span class="br0">&#41;</span><span class="sy0">;</span></pre>
<p>
The printf() function prints output to stdout, according to format and other
arguments passed to printf(). The string format consists of two types of items
- characters that will be printed to the screen, and format commands that
define how the other arguments to printf() are displayed. Basically, you
specify a format string that has text in it, as well as “special” characters
that map to the other arguments of printf(). For example, this code
</p>
<pre class="c code c++" style="font-family:monospace;">     <span class="kw4">char</span> name<span class="br0">&#91;</span><span class="nu0">20</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="st0">&quot;Bob&quot;</span><span class="sy0">;</span>
     <span class="kw4">int</span> age <span class="sy0">=</span> <span class="nu0">21</span><span class="sy0">;</span>
     <a href="http://www.opengroup.org/onlinepubs/009695399/functions/printf.html"><span class="kw3">printf</span></a><span class="br0">&#40;</span> <span class="st0">&quot;Hello %s, you are %d years old<span class="es1">\n</span>&quot;</span><span class="sy0">,</span> name<span class="sy0">,</span> age <span class="br0">&#41;</span><span class="sy0">;</span></pre>
<p>

displays the following output:
</p>
<pre class="code">
     Hello Bob, you are 21 years old</pre>
<p>
The %s means, “insert the first argument, a string, right here.” The %d
indicates that the second argument (an integer) should be placed there. There
are different %-codes for different variable types, as well as options to limit
the length of the variables and whatnot.

</p>
<table class="inline">
	<tr class="row0">
		<th class="col0">Code</th><th class="col1">Format</th>
	</tr>
	<tr class="row1">
		<td class="col0">%c</td><td class="col1">character</td>
	</tr>
	<tr class="row2">
		<td class="col0">%d</td><td class="col1">signed integers</td>
	</tr>
	<tr class="row3">
		<td class="col0">%i</td><td class="col1">signed integers</td>
	</tr>
	<tr class="row4">
		<td class="col0">%I64d</td><td class="col1">long long (8B integer), <acronym title="Microsoft">MS</acronym>-specific</td>
	</tr>
	<tr class="row5">
		<td class="col0">%I64u</td><td class="col1">unsigned long long (8B integer), <acronym title="Microsoft">MS</acronym>-specific</td>
	</tr>
	<tr class="row6">
		<td class="col0">%e</td><td class="col1">scientific notation, with a lowercase “e”</td>
	</tr>
	<tr class="row7">
		<td class="col0">%E</td><td class="col1">scientific notation, with a uppercase “E”</td>
	</tr>
	<tr class="row8">
		<td class="col0">%f</td><td class="col1">floating point</td>
	</tr>
	<tr class="row9">
		<td class="col0">%g</td><td class="col1">use %e or %f, whichever is shorter</td>
	</tr>
	<tr class="row10">
		<td class="col0">%G</td><td class="col1">use %E or %f, whichever is shorter</td>
	</tr>
	<tr class="row11">
		<td class="col0">%o</td><td class="col1">octal</td>
	</tr>
	<tr class="row12">
		<td class="col0">%s</td><td class="col1">a string of characters</td>
	</tr>
	<tr class="row13">
		<td class="col0">%u</td><td class="col1">unsigned integer</td>
	</tr>
	<tr class="row14">
		<td class="col0">%x</td><td class="col1">unsigned hexadecimal, with lowercase letters</td>
	</tr>
	<tr class="row15">
		<td class="col0">%X</td><td class="col1">unsigned hexadecimal, with uppercase letters</td>
	</tr>
	<tr class="row16">
		<td class="col0">%p</td><td class="col1">a pointer</td>
	</tr>
	<tr class="row17">
		<td class="col0">%n</td><td class="col1">the argument shall be a pointer to an integer into which is placed the number of characters written so far</td>
	</tr>
</table>

<p>
An integer placed between a % sign and the format command acts as a minimum
field width specifier, and pads the output with spaces or zeros to make it long
enough. If you want to pad with zeros, place a zero before the minimum field
width specifier:
</p>
<pre class="c code c++" style="font-family:monospace;">     <span class="sy0">%</span>012d</pre>
<p>
You may also specify the minimum field width in an int variable if instead of a
number you put the * sign:
</p>
<pre class="c code c++" style="font-family:monospace;">     <span class="kw4">int</span> width <span class="sy0">=</span> <span class="nu0">12</span><span class="sy0">;</span>
     <span class="kw4">int</span> age <span class="sy0">=</span> <span class="nu0">100</span><span class="sy0">;</span>
     <a href="http://www.opengroup.org/onlinepubs/009695399/functions/printf.html"><span class="kw3">printf</span></a><span class="br0">&#40;</span><span class="st0">&quot;%*d&quot;</span><span class="sy0">,</span> width<span class="sy0">,</span> age<span class="br0">&#41;</span><span class="sy0">;</span></pre>
<p>
You can also include a precision modifier, in the form of a .N where N is some
number, before the format command:
</p>
<pre class="c code c++" style="font-family:monospace;">     <span class="sy0">%</span>012.4d</pre>
<p>
The precision modifier has different meanings depending on the format command
being used:

</p>
<ul>
<li class="level1"><div class="li"> With %e, %E, and %f, the precision modifier lets you specify the number of decimal places desired. For example, %12.6f will display a floating number at least 12 digits wide, with six decimal places.</div>
</li>
<li class="level1"><div class="li"> With %g and %G, the precision modifier determines the maximum number of significant digits displayed.</div>
</li>
<li class="level1"><div class="li"> With %s, the precision modifier simply acts as a maximum field length, to complement the minimum field length that precedes the period.</div>
</li>
</ul>

<p>

As with field width specifier, you may use an int variable
to specify the precision modifier by using the * sign:
</p>
<pre class="c code c++" style="font-family:monospace;">     <span class="kw4">const</span> <span class="kw4">char</span><span class="sy0">*</span> msg <span class="sy0">=</span> <span class="st0">&quot;Hello printf&quot;</span><span class="sy0">;</span>
     <span class="kw4">int</span> string_size <span class="sy0">=</span> strlen <span class="br0">&#40;</span>msg<span class="br0">&#41;</span><span class="sy0">;</span>
     <a href="http://www.opengroup.org/onlinepubs/009695399/functions/printf.html"><span class="kw3">printf</span></a><span class="br0">&#40;</span><span class="st0">&quot;msg: %.*s&quot;</span><span class="sy0">,</span> string_size<span class="sy0">,</span> msg<span class="br0">&#41;</span><span class="sy0">;</span></pre>
<p>
All of printf()&#039;s output is right-justified, unless you place a minus sign
right after the % sign. For example,
</p>
<pre class="c code c++" style="font-family:monospace;">     <span class="sy0">%-</span><span class="nu17">12.4f</span></pre>
<p>
will display a floating point number with a minimum of 12 characters, 4 decimal
places, and left justified. 
</p>

<p>
You may modify the %d, %i, %o, %u, and %x type
specifiers with the letter l and the letter h to specify long and short data
types (e.g. %hd means a short integer). 
</p>

<p>
The %e, %f, and %g type specifiers can have the letter l before them to indicate that a double follows. The %g, %f, and %e type specifiers can be preceded with the character &#039;#&#039; to ensure that
the decimal point will be present, even if there are no decimal digits. 
</p>

<p>
The use of the &#039;#&#039; character with the %x type specifier indicates that the hexidecimal
number should be printed with the &#039;0x&#039; prefix. 
</p>

<p>
The use of the &#039;#&#039; character
with the %o type specifier indicates that the octal value should be displayed
with a 0 prefix.
</p>

<p>
Inserting a plus sign &#039;+&#039; into the type specifier will force positive values to
be preceded by a &#039;+&#039; sign. Putting a space character &#039; &#039; there will force
positive values to be preceded by a single space character.
</p>

<p>
You can also include <a href="../../escape_sequences" class="wikilink1" title="escape_sequences">constant escape sequences</a> in the output string.
The return value of printf() is the number of characters printed, or a negative
number if an error occurred.
</p>

<p>
Related Topics: <a href="fprintf" class="wikilink1" title="c:io:fprintf">fprintf</a>, <a href="puts" class="wikilink1" title="c:io:puts">puts</a>, <a href="scanf" class="wikilink1" title="c:io:scanf">scanf</a>, <a href="sprintf" class="wikilink1" title="c:io:sprintf">sprintf</a>
</p>

</div>
<!-- SECTION "printf" [3-] --></div>
</body>
</html>
