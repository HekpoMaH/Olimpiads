<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"
 lang="en" dir="ltr">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>c:other:va_arg</title>
<meta name="generator" content="DokuWiki Release 2009-12-25c &quot;Lemming&quot;" />
<meta name="robots" content="index,follow" />
<meta name="date" content="2009-05-25T22:23:40-0700" />
<meta name="keywords" content="c,other,va_arg" />
<link rel="search" type="application/opensearchdescription+xml" href="http://www.cppreference.com/wiki/lib/exe/opensearch.php" title="C++ Reference" />
<link rel="start" href="../../index.html" />
<link rel="contents" href="http://www.cppreference.com/wiki/c/other/va_arg?do=index" title="Index" />
<link rel="alternate" type="application/rss+xml" title="Recent Changes" href="http://www.cppreference.com/wiki/feed.php" />
<link rel="alternate" type="application/rss+xml" title="Current Namespace" href="http://www.cppreference.com/wiki/feed.php?mode=list&amp;ns=c:other" />
<link rel="alternate" type="text/html" title="Plain HTML" href="http://www.cppreference.com/wiki/_export/xhtml/c/other/va_arg" />
<link rel="alternate" type="text/plain" title="Wiki Markup" href="http://www.cppreference.com/wiki/_export/raw/c/other/va_arg" />
<link rel="canonical" href="va_arg" />
<link rel="stylesheet" media="all" type="text/css" href="../../lib/exe/css.php@s=all&amp;t=custom1&amp;tseed=1265723194" />
<link rel="stylesheet" media="screen" type="text/css" href="../../lib/exe/css.php@t=custom1&amp;tseed=1265723194" />
<link rel="stylesheet" media="print" type="text/css" href="../../lib/exe/css.php@s=print&amp;t=custom1&amp;tseed=1265723194" />
<script type="text/javascript" charset="utf-8" ><!--//--><![CDATA[//><!--
var NS='c:other';var JSINFO = {"id":"c:other:va_arg","namespace":"c:other"};
//--><!]]></script>
<script type="text/javascript" charset="utf-8" src="../../lib/exe/js.php@tseed=1265723194" ></script>
</head>
<body>
<div class="dokuwiki export">



<h2><a name="va_arg" id="va_arg">va_arg</a></h2>
<div class="level2">

<p>
Syntax:
</p>
<pre class="c code c++" style="font-family:monospace;">    <span class="co2">#include &lt;cstdarg&gt;</span>
    type va_arg<span class="br0">&#40;</span> va_list argptr<span class="sy0">,</span> type <span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="kw4">void</span> va_end<span class="br0">&#40;</span> va_list argptr <span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="kw4">void</span> va_start<span class="br0">&#40;</span> va_list argptr<span class="sy0">,</span> last_parm <span class="br0">&#41;</span><span class="sy0">;</span></pre>
<p>
The va_arg() macros are used to pass a variable number of arguments to a
function.

</p>
<ol>
<li class="level1"><div class="li"> First, you must have a call to va_start() passing a valid va_list and the mandatory argument that directly precedes the &#039;â€¦&#039; argument of the function. If you only have one mandatory argument, it is that argument. You must have at least one mandatory argument. This argument can be anything; one way to use it is to have it be an integer describing the number of parameters being passed.</div>
</li>
<li class="level1"><div class="li"> Next, you call va_arg() passing the va_list and the type of the argument to be returned. The return value of va_arg() is the current parameter.</div>
</li>
<li class="level1"><div class="li"> Repeat calls to va_arg() for however many arguments you have.</div>
</li>
<li class="level1"><div class="li"> Finally, a call to va_end() passing the va_list is necessary for proper cleanup.</div>
</li>
</ol>

<p>

For example:
</p>
<pre class="c code c++" style="font-family:monospace;">    <span class="kw4">int</span> sum<span class="br0">&#40;</span> <span class="kw4">int</span> num<span class="sy0">,</span> ... <span class="br0">&#41;</span> <span class="br0">&#123;</span>
      <span class="kw4">int</span> answer <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span>
      va_list argptr<span class="sy0">;</span>
&nbsp;
      va_start<span class="br0">&#40;</span> argptr<span class="sy0">,</span> num <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
      <span class="kw1">for</span><span class="br0">&#40;</span> <span class="sy0">;</span> num <span class="sy0">&gt;</span> <span class="nu0">0</span><span class="sy0">;</span> num<span class="sy0">--</span> <span class="br0">&#41;</span> <span class="br0">&#123;</span>
        answer <span class="sy0">+=</span> va_arg<span class="br0">&#40;</span> argptr<span class="sy0">,</span> <span class="kw4">int</span> <span class="br0">&#41;</span><span class="sy0">;</span>
      <span class="br0">&#125;</span>
&nbsp;
      va_end<span class="br0">&#40;</span> argptr <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
      <span class="kw1">return</span><span class="br0">&#40;</span> answer <span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="br0">&#125;</span>
&nbsp;
    <span class="kw4">int</span> main<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp;
      <span class="kw4">int</span> answer <span class="sy0">=</span> sum<span class="br0">&#40;</span> 4<span class="sy0">,</span> 4<span class="sy0">,</span> 3<span class="sy0">,</span> 2<span class="sy0">,</span> 1 <span class="br0">&#41;</span><span class="sy0">;</span>
      <a href="http://www.opengroup.org/onlinepubs/009695399/functions/printf.html"><span class="kw3">printf</span></a><span class="br0">&#40;</span> <span class="st0">&quot;The answer is %d<span class="es1">\n</span>&quot;</span><span class="sy0">,</span> answer <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
      <span class="kw1">return</span><span class="br0">&#40;</span> 0 <span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="br0">&#125;</span></pre>
<p>
This code displays 10, which is 4+3+2+1.
</p>

<p>
Here is another example of variable argument function, which is a simple
printing function:
</p>
<pre class="c code c++" style="font-family:monospace;">   <span class="kw4">void</span> my_printf<span class="br0">&#40;</span> <span class="kw4">char</span> <span class="sy0">*</span>format<span class="sy0">,</span> ... <span class="br0">&#41;</span> <span class="br0">&#123;</span>
     va_list argptr<span class="sy0">;</span>
&nbsp;
     va_start<span class="br0">&#40;</span> argptr<span class="sy0">,</span> format <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
     <span class="kw1">while</span><span class="br0">&#40;</span> <span class="sy0">*</span>format <span class="sy0">!=</span> <span class="st0">'<span class="es5">\0</span>'</span> <span class="br0">&#41;</span> <span class="br0">&#123;</span>
       <span class="co1">// string</span>
       <span class="kw1">if</span><span class="br0">&#40;</span> <span class="sy0">*</span>format <span class="sy0">==</span> <span class="st0">'s'</span> <span class="br0">&#41;</span> <span class="br0">&#123;</span>
         <span class="kw4">char</span><span class="sy0">*</span> s <span class="sy0">=</span> va_arg<span class="br0">&#40;</span> argptr<span class="sy0">,</span> <span class="kw4">char</span> <span class="sy0">*</span> <span class="br0">&#41;</span><span class="sy0">;</span>
         <a href="http://www.opengroup.org/onlinepubs/009695399/functions/printf.html"><span class="kw3">printf</span></a><span class="br0">&#40;</span> <span class="st0">&quot;Printing a string: %s<span class="es1">\n</span>&quot;</span><span class="sy0">,</span> s <span class="br0">&#41;</span><span class="sy0">;</span>
       <span class="br0">&#125;</span>
       <span class="co1">// character</span>
       <span class="kw1">else</span> <span class="kw1">if</span><span class="br0">&#40;</span> <span class="sy0">*</span>format <span class="sy0">==</span> <span class="st0">'c'</span> <span class="br0">&#41;</span> <span class="br0">&#123;</span>
         <span class="kw4">char</span> c <span class="sy0">=</span> <span class="br0">&#40;</span><span class="kw4">char</span><span class="br0">&#41;</span> va_arg<span class="br0">&#40;</span> argptr<span class="sy0">,</span> <span class="kw4">int</span> <span class="br0">&#41;</span><span class="sy0">;</span>
         <a href="http://www.opengroup.org/onlinepubs/009695399/functions/printf.html"><span class="kw3">printf</span></a><span class="br0">&#40;</span> <span class="st0">&quot;Printing a character: %c<span class="es1">\n</span>&quot;</span><span class="sy0">,</span> c <span class="br0">&#41;</span><span class="sy0">;</span>
         <span class="kw2">break</span><span class="sy0">;</span>
       <span class="br0">&#125;</span>
       <span class="co1">// integer</span>
       <span class="kw1">else</span> <span class="kw1">if</span><span class="br0">&#40;</span> <span class="sy0">*</span>format <span class="sy0">==</span> <span class="st0">'d'</span> <span class="br0">&#41;</span> <span class="br0">&#123;</span>
         <span class="kw4">int</span> d <span class="sy0">=</span> va_arg<span class="br0">&#40;</span> argptr<span class="sy0">,</span> <span class="kw4">int</span> <span class="br0">&#41;</span><span class="sy0">;</span>
         <a href="http://www.opengroup.org/onlinepubs/009695399/functions/printf.html"><span class="kw3">printf</span></a><span class="br0">&#40;</span> <span class="st0">&quot;Printing an integer: %d<span class="es1">\n</span>&quot;</span><span class="sy0">,</span> d <span class="br0">&#41;</span><span class="sy0">;</span>
       <span class="br0">&#125;</span>
&nbsp;
       format<span class="sy0">++;</span>
     <span class="br0">&#125;</span>
&nbsp;
     va_end<span class="br0">&#40;</span> argptr <span class="br0">&#41;</span><span class="sy0">;</span>
   <span class="br0">&#125;</span>
&nbsp;
   <span class="kw4">int</span> main<span class="br0">&#40;</span> <span class="kw4">void</span> <span class="br0">&#41;</span> <span class="br0">&#123;</span>
&nbsp;
     my_printf<span class="br0">&#40;</span> <span class="st0">&quot;sdc&quot;</span><span class="sy0">,</span> <span class="st0">&quot;This is a string&quot;</span><span class="sy0">,</span> <span class="nu0">29</span><span class="sy0">,</span> <span class="st0">'X'</span> <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
     <span class="kw1">return</span><span class="br0">&#40;</span> 0 <span class="br0">&#41;</span><span class="sy0">;</span>
   <span class="br0">&#125;</span></pre>
<p>
This code displays the following output when run:
</p>
<pre class="code">
   Printing a string: This is a string
   Printing an integer: 29
   Printing a character: X</pre>
</div>
<!-- SECTION "va_arg" [3-] --></div>
</body>
</html>
