<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"
 lang="en" dir="ltr">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>c:string:strlcpy</title>
<meta name="generator" content="DokuWiki Release 2009-12-25c &quot;Lemming&quot;" />
<meta name="robots" content="index,follow" />
<meta name="date" content="2009-12-15T10:59:10-0800" />
<meta name="keywords" content="c,string,strlcpy" />
<link rel="search" type="application/opensearchdescription+xml" href="http://www.cppreference.com/wiki/lib/exe/opensearch.php" title="C++ Reference" />
<link rel="start" href="../../index.html" />
<link rel="contents" href="http://www.cppreference.com/wiki/c/string/strlcpy?do=index" title="Index" />
<link rel="alternate" type="application/rss+xml" title="Recent Changes" href="http://www.cppreference.com/wiki/feed.php" />
<link rel="alternate" type="application/rss+xml" title="Current Namespace" href="http://www.cppreference.com/wiki/feed.php?mode=list&amp;ns=c:string" />
<link rel="alternate" type="text/html" title="Plain HTML" href="http://www.cppreference.com/wiki/_export/xhtml/c/string/strlcpy" />
<link rel="alternate" type="text/plain" title="Wiki Markup" href="http://www.cppreference.com/wiki/_export/raw/c/string/strlcpy" />
<link rel="canonical" href="strlcpy" />
<link rel="stylesheet" media="all" type="text/css" href="../../lib/exe/css.php@s=all&amp;t=custom1&amp;tseed=1265723194" />
<link rel="stylesheet" media="screen" type="text/css" href="../../lib/exe/css.php@t=custom1&amp;tseed=1265723194" />
<link rel="stylesheet" media="print" type="text/css" href="../../lib/exe/css.php@s=print&amp;t=custom1&amp;tseed=1265723194" />
<script type="text/javascript" charset="utf-8" ><!--//--><![CDATA[//><!--
var NS='c:string';var JSINFO = {"id":"c:string:strlcpy","namespace":"c:string"};
//--><!]]></script>
<script type="text/javascript" charset="utf-8" src="../../lib/exe/js.php@tseed=1265723194" ></script>
</head>
<body>
<div class="dokuwiki export">
<!-- TOC START -->
<div class="toc">
<div class="tocheader toctoggle" id="toc__header">Table of Contents</div>
<div id="toc__inside">

<ul class="toc">
<li class="clear">

<ul class="toc">
<li class="level2"><div class="li"><span class="li"><a href="strlcpy#strlcpy" class="toc">strlcpy</a></span></div></li>
<li class="level2"><div class="li"><span class="li"><a href="strlcpy#section" class="toc"></a></span></div></li>
<li class="level2"><div class="li"><span class="li"><a href="strlcpy#section1" class="toc"></a></span></div></li></ul>
</li></ul>
</div>
</div>
<!-- TOC END -->



<h2><a name="strlcpy" id="strlcpy">strlcpy</a></h2>
<div class="level2">

<p>
<strong>Warning:</strong> Non-standard function!
</p>

<p>
Syntax:
</p>
<pre class="c code c++" style="font-family:monospace;">    <span class="co2">#include &lt;string.h&gt;  // On BSD or compatible systems</span>
    size_t strlcpy<span class="br0">&#40;</span> <span class="kw4">char</span> <span class="sy0">*</span>dst<span class="sy0">,</span> <span class="kw4">const</span> <span class="kw4">char</span> <span class="sy0">*</span>src<span class="sy0">,</span> size_t siz<span class="br0">&#41;</span><span class="sy0">;</span></pre>
<p>
An attempt of the BSD people to “fix” <a href="strncpy" class="wikilink1" title="c:string:strncpy">strncpy</a>.  There is a reason this function is not in any <acronym title="International Organization for Standardization">ISO</acronym> standard.  See explanation after the description.
</p>

<p>
<strong>Original description:</strong>
</p>

<p>
Copy <code>src</code> to string <code>dst</code> of size <code>siz</code>.<br/>
At most <code>siz-1</code> characters will be copied.<br/>
Always <code>NUL</code> terminates (unless <code>siz == 0</code>).<br/>
Returns <code>strlen(src);</code> if <code>retval &gt;= siz</code>, truncation occurred.

</p>

</div>
<!-- SECTION "strlcpy" [1-594] --><div class="level2">

<p>
<strong>Why strlcpy is not an improvement, but rather a different, and quite possibly worse compromise:</strong>
</p>

<p>
Perceived advantages of strlcpy are:

</p>
<ol>
<li class="level1"><div class="li"> the target is (nearly) always <code>NUL</code> terminated</div>
</li>
<li class="level1"><div class="li"> the target is not filled up with zero characters</div>
</li>
</ol>

<p>

<em>The first “advantage”</em> is supposed to make programs more robust by ensuring that the resulting strings are always <code>NUL</code> terminated.  First of all, they aren&#039;t, because the size argument can be <code>0</code>, in which case the code cannot write the terminating <code>NUL</code> character.  This fact is already a hint that strlcpy is not a very well designed function.  Even if we ignore that flaw for a moment, there is more to it.
</p>

<p>
The good and warm feeling of security that <code>strlcpy</code> may give its user is actually nothing more, than hiding an error.  And hiding an error is never a good idea. <a href="strncpy" class="wikilink1" title="c:string:strncpy">strncpy</a> has a very blunt and effective way of reporting if the copy operation failed: it does not <code>NUL</code> terminate its target string.  This means, that 2 hours after the <a href="strncpy" class="wikilink1" title="c:string:strncpy">strncpy</a> call that went unchecked (without error handling), it is still clearly visible (in memory) what has happened.  Our buffer has no terminating zero character.  However 2 hours after <code>strlcpy(buf,”assume”,3);</code> nothing whatsoever will show that the copy has failed, and the call went unchecked.  In the lucky case, it will just result in overwriting some files or some mysteriously failed operations.  In the very lucky case it will result in immediate damage. For example the overwritten files are important, and so the unchecked return value results in a crash or other system failure later on.  Why is this luckier?  Because we know there is a bug, even though <code>strlcpy</code> has tried its best to hide it.
</p>

<p>
Not much different from <a href="strncpy" class="wikilink1" title="c:string:strncpy">strncpy</a> you might say.  You do not check the return value, you get problems.  Except that with <a href="strncpy" class="wikilink1" title="c:string:strncpy">strncpy</a> a look at the dump will tell you exactly what the problem is. No <code>NUL</code> termination. With <code>strlcpy</code> all you see is a C-string, with no indication that it has been truncated.
</p>

<p>
<em>The second “advantage”</em> seems to be more straightforward.  If I copy 5 bytes into a 42K buffer, <a href="strncpy" class="wikilink1" title="c:string:strncpy">strncpy</a> will write nearly 42K for no reason whatsoever, because we are only possibly interested in the <code>NUL</code> after the 5 characters and the <code>NUL</code> at the end of the buffer.  That may be a perforance hit you do not want to pay.  If you meet such a rare situation while coding ask yourself: what is the maximum size for what I am copying?  Is this the only thing that may go into that large buffer?  It may well turn out that instead of 42*1024, you actually need 255 bytes max. for that filename you are copying.  Depending on your situation, zeroing out a few bytes more might as well worth the trouble: you can use an <acronym title="International Organization for Standardization">ISO</acronym> <em>standard</em> function.
</p>

<p>
So while there are corner cases when <code>strlcpy</code> may actually be a lot faster than <a href="strncpy" class="wikilink1" title="c:string:strncpy">strncpy</a>, it is also true the other way around.  The designers of <code>strlcpy</code> have made the unfortunate decision of ignoring the golden rule of: do one thing (and do that well).  <code>strlcpy</code> does not report only whether or not the copy was successful.  Nope.  It reports also the <em>size</em> of the input.  Who asked for that?  This means, that if our hypothetical situation above is reversed, <code>strlcpy</code> will read 42K characters to find the length of the input, while it had only 5 bytes it could write.  The caller may not even be interested in the length of the input.  The caller just wants to give an error message saying “The filename is too long”.  A malicious entity figures this out and may just start sending large strings and slow down a server tenfold.
</p>

<p>
So even the second, not-so-controversial “benefit” of <code>strlcpy</code> over <a href="strncpy" class="wikilink1" title="c:string:strncpy">strncpy</a> is questionable at best, and bogus at worse.
</p>

<p>
<strong>Why strlcpy is actually well-designed.</strong>
</p>

<p>
The above rant is misguided at best, a troll at worst.
</p>

<p>
The reason strlcpy returns the number of bytes written is so that you can check for short counts. This is the “error handling” that you are ranting about. Also, if you think that not NULL-terminating a string is an acceptable mechanism of error handling, then you&#039;re pretty far gone.
</p>

</div>
<!-- SECTION "" [595-4754] --><div class="level2">

<p>
Related Topics: <a href="memcpy" class="wikilink1" title="c:string:memcpy">memcpy</a>, <a href="strchr" class="wikilink1" title="c:string:strchr">strchr</a>, <a href="strncpy" class="wikilink1" title="c:string:strncpy">strncpy</a>, <a href="strncat" class="wikilink1" title="c:string:strncat">strncat</a>, <a href="strncmp" class="wikilink1" title="c:string:strncmp">strncmp</a>
</p>

<p>
Another related (but non-standard) function is <a href="strlcat" class="wikilink1" title="c:string:strlcat">strlcat</a>.
</p>

</div>
<!-- SECTION "" [4755-] --></div>
</body>
</html>
