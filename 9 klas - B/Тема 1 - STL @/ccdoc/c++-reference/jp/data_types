<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="jp"
 lang="jp" dir="ltr">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>jp:data_types</title>
<meta name="generator" content="DokuWiki Release 2009-12-25c &quot;Lemming&quot;" />
<meta name="robots" content="index,follow" />
<meta name="date" content="2009-10-16T18:17:13-0700" />
<meta name="keywords" content="jp,data_types" />
<link rel="search" type="application/opensearchdescription+xml" href="http://www.cppreference.com/wiki/lib/exe/opensearch.php" title="C++ Reference" />
<link rel="start" href="../index.html" />
<link rel="contents" href="http://www.cppreference.com/wiki/jp/data_types?do=index" title="Index" />
<link rel="alternate" type="application/rss+xml" title="Recent Changes" href="http://www.cppreference.com/wiki/feed.php" />
<link rel="alternate" type="application/rss+xml" title="Current Namespace" href="http://www.cppreference.com/wiki/feed.php?mode=list&amp;ns=jp" />
<link rel="alternate" type="text/html" title="Plain HTML" href="http://www.cppreference.com/wiki/_export/xhtml/jp/data_types" />
<link rel="alternate" type="text/plain" title="Wiki Markup" href="http://www.cppreference.com/wiki/_export/raw/jp/data_types" />
<link rel="canonical" href="data_types" />
<link rel="stylesheet" media="all" type="text/css" href="../lib/exe/css.php@s=all&amp;t=custom1&amp;tseed=1265723194" />
<link rel="stylesheet" media="screen" type="text/css" href="../lib/exe/css.php@t=custom1&amp;tseed=1265723194" />
<link rel="stylesheet" media="print" type="text/css" href="../lib/exe/css.php@s=print&amp;t=custom1&amp;tseed=1265723194" />
<script type="text/javascript" charset="utf-8" ><!--//--><![CDATA[//><!--
var NS='jp';var JSINFO = {"id":"jp:data_types","namespace":"jp"};
//--><!]]></script>
<script type="text/javascript" charset="utf-8" src="../lib/exe/js.php@tseed=1265723194" ></script>
</head>
<body>
<div class="dokuwiki export">
<!-- TOC START -->
<div class="toc">
<div class="tocheader toctoggle" id="toc__header">Table of Contents</div>
<div id="toc__inside">

<ul class="toc">
<li class="clear">

<ul class="toc">
<li class="level2"><div class="li"><span class="li"><a href="data_types#c_データ型" class="toc">C++データ型</a></span></div>
<ul class="toc">
<li class="level3"><div class="li"><span class="li"><a href="data_types#型修飾子" class="toc">型修飾子</a></span></div></li>
<li class="level3"><div class="li"><span class="li"><a href="data_types#型のサイズと範囲" class="toc">型のサイズと範囲</a></span></div></li>
<li class="level3"><div class="li"><span class="li"><a href="data_types#型宣言を読む" class="toc">型宣言を読む</a></span></div></li></ul>
</li></ul>
</li></ul>
</div>
</div>
<!-- TOC END -->



<h2><a name="c_データ型" id="c_データ型">C++データ型</a></h2>
<div class="level2">

<p>
C++プログラマーはC言語上では、次の5つの型を使用することができます: void, int, float, double, char。

</p>
<table class="inline">
	<tr class="row0">
		<th class="col0">型</th><th class="col1">説明</th>
	</tr>
	<tr class="row1">
		<td class="col0">void</td><td class="col1">型がないことを表す型</td>
	</tr>
	<tr class="row2">
		<td class="col0">int</td><td class="col1">整数</td>
	</tr>
	<tr class="row3">
		<td class="col0">float</td><td class="col1">浮動小数点数</td>
	</tr>
	<tr class="row4">
		<td class="col0">double</td><td class="col1">倍精度浮動小数点数</td>
	</tr>
	<tr class="row5">
		<td class="col0">char</td><td class="col1">文字</td>
	</tr>
</table>

<p>

これに加えて、C++ではさらに2つの型(bool, wchar_t)が定義されています。

</p>
<table class="inline">
	<tr class="row0">
		<th class="col0">型</th><th class="col1">説明</th>
	</tr>
	<tr class="row1">
		<td class="col0">bool</td><td class="col1">ブーリアン型: true もしくは false</td>
	</tr>
	<tr class="row2">
		<td class="col0">wchar_t</td><td class="col1">ワイド文字</td>
	</tr>
</table>

</div>
<!-- SECTION "C++データ型" [1-488] -->
<h3><a name="型修飾子" id="型修飾子">型修飾子</a></h3>
<div class="level3">

<p>

上記の型のうちのいくつかの型は, singed, unsigned, short, longという修飾子を付けることができます。また、これらの型修飾子が単独で使用される場合もあり、その場合はデータ型としてintが指定されたとみなされます。使用可能な完全なリストを以下に示します。同じ意味を持つ型は同じ行に記述されています:

</p>
<table class="inline">
	<tr class="row0">
		<th class="col0" colspan="4">整数型</th>
	</tr>
	<tr class="row1">
		<td class="col0" colspan="4">bool</td>
	</tr>
	<tr class="row2">
		<td class="col0" colspan="4">char</td>
	</tr>
	<tr class="row3">
		<td class="col0" colspan="4">signed char</td>
	</tr>
	<tr class="row4">
		<td class="col0" colspan="4">unsigned char</td>
	</tr>
	<tr class="row5">
		<td class="col0" colspan="4">wchar_t</td>
	</tr>
	<tr class="row6">
		<td class="col0">short</td><td class="col1">short int</td><td class="col2">signed short</td><td class="col3">signed short int</td>
	</tr>
	<tr class="row7">
		<td class="col0" colspan="2">unsigned short</td><td class="col2" colspan="2">unsigned short int</td>
	</tr>
	<tr class="row8">
		<td class="col0">int</td><td class="col1">signed</td><td class="col2" colspan="2">signed int</td>
	</tr>
	<tr class="row9">
		<td class="col0" colspan="2">unsigned</td><td class="col2" colspan="2">unsigned int</td>
	</tr>
	<tr class="row10">
		<td class="col0">long</td><td class="col1">long int</td><td class="col2">signed long</td><td class="col3">signed long int</td>
	</tr>
	<tr class="row11">
		<td class="col0" colspan="2">unsigned long</td><td class="col2" colspan="2">unsigned long int</td>
	</tr>
	<tr class="row12">
		<th class="col0" colspan="4">浮動小数点数型</th>
	</tr>
	<tr class="row13">
		<td class="col0" colspan="4">float</td>
	</tr>
	<tr class="row14">
		<td class="col0" colspan="4">double</td>
	</tr>
	<tr class="row15">
		<td class="col0" colspan="4">long double</td>
	</tr>
	<tr class="row16">
		<th class="col0" colspan="4">オプションでサポートされる整数型</th>
	</tr>
	<tr class="row17">
		<td class="col0">long long</td><td class="col1">long long int</td><td class="col2">signed long long</td><td class="col3">signed long long int</td>
	</tr>
	<tr class="row18">
		<td class="col0" colspan="2">unsigned long long</td><td class="col2" colspan="2">unsigned long long int</td>
	</tr>
</table>

</div>
<!-- SECTION "型修飾子" [489-1458] -->
<h3><a name="型のサイズと範囲" id="型のサイズと範囲">型のサイズと範囲</a></h3>
<div class="level3">

<p>

データ型のサイズと、入力できるデータの範囲はコンパイラとアーキテクチャ依存です。<a href="keywords/sizeof" class="wikilink1" title="jp:keywords:sizeof">sizeof</a>演算子を使用することでデータ型のサイズを知ることができます。結果はほとんどの場合はバイト数で表現されます。しかし、多くのアーキテクチャで実装されている、共通の標準的なデータ型のサイズというものがあります。intとfloatは多くの場合32ビット、charは8ビット、doubleは64ビットです。boolは多くの場合は8ビットのデータ型として実装されています。long long型は64ビットです。”cfloat”もしくは”float.h”というヘッダファイルでは浮動小数点数型の範囲を規定しています。整数型に関しては”climits”もしくは”limits.h”というヘッダファイルの中で規定されています。
</p>

<p>
数字型の限界値は&lt;limits&gt;ヘッダの中で定義されています。また、<a href="http://www.cppreference.com/wiki/jp/limits/numeric_limits" class="wikilink2" title="jp:limits:numeric_limits" rel="nofollow">numeric_limits</a>テンプレートを使用すると、C++データ型の、システム依存の数値表現を取得することができるようになります。下記の表の適切な関数を選び、テンプレート引数に知りたいデータ型を設定します。ユーザ定義型に対するnumeric_limitsはオーバーロードできることに注意してください。
</p>

<p>
^メソッドもしくは<br/>
定数^返り値^説明^
</p>
<table class="inline">
	<tr class="row0">
		<td class="col0">is_specialized</td><td class="col1">bool</td><td class="col2"> </td>
	</tr>
	<tr class="row1">
		<td class="col0">radix</td><td class="col1">int</td><td class="col2">指数の底 </td>
	</tr>
	<tr class="row2">
		<td class="col0">digits</td><td class="col1">int</td><td class="col2">仮数の基数の桁数 </td>
	</tr>
	<tr class="row3">
		<td class="col0">digits10</td><td class="col1">int</td><td class="col2">仮数の10進数の基数の桁数 </td>
	</tr>
	<tr class="row4">
		<td class="col0">is_signed</td><td class="col1">bool</td><td class="col2"> </td>
	</tr>
	<tr class="row5">
		<td class="col0">is_integer</td><td class="col1">bool</td><td class="col2"> </td>
	</tr>
	<tr class="row6">
		<td class="col0">is_exact</td><td class="col1">bool</td><td class="col2"> </td>
	</tr>
	<tr class="row7">
		<td class="col0">min()</td><td class="col1">&lt;type&gt;</td><td class="col2">負の数を除いて、表現できるもっとも小さい数値 </td>
	</tr>
	<tr class="row8">
		<td class="col0">max()</td><td class="col1">&lt;type&gt;</td><td class="col2">表現できるもっとも大きな数値 </td>
	</tr>
	<tr class="row9">
		<td class="col0">epsilon()</td><td class="col1">&lt;type&gt;</td><td class="col2">1と1より大きな最小の数の差(表現可能な最小の誤差) </td>
	</tr>
	<tr class="row10">
		<td class="col0">round_error()</td><td class="col1">&lt;type&gt;</td><td class="col2">丸め誤差として取り得る最大の値 </td>
	</tr>
	<tr class="row11">
		<td class="col0">infinity()</td><td class="col1">&lt;type&gt;</td><td class="col2">あれば、無限大の表現を返す </td>
	</tr>
	<tr class="row12">
		<td class="col0">quiet_NaN()</td><td class="col1">&lt;type&gt;</td><td class="col2">浮動小数点数エラーではないが、不正な値</td>
	</tr>
	<tr class="row13">
		<td class="col0">signaling_NaN()</td><td class="col1">&lt;type&gt;</td><td class="col2">浮動小数点数エラーを表す、不正な値</td>
	</tr>
	<tr class="row14">
		<td class="col0">denorm_min()</td><td class="col1">&lt;type&gt;</td><td class="col2"> </td>
	</tr>
	<tr class="row15">
		<td class="col0">min_exponent</td><td class="col1">int</td><td class="col2"> </td>
	</tr>
	<tr class="row16">
		<td class="col0">min_exponent10</td><td class="col1">int</td><td class="col2"> </td>
	</tr>
	<tr class="row17">
		<td class="col0">max_exponent</td><td class="col1">int</td><td class="col2"> </td>
	</tr>
	<tr class="row18">
		<td class="col0">max_exponent10</td><td class="col1">int</td><td class="col2"> </td>
	</tr>
	<tr class="row19">
		<td class="col0">has_infinity</td><td class="col1">bool</td><td class="col2"> </td>
	</tr>
	<tr class="row20">
		<td class="col0">has_quiet_NaN</td><td class="col1">bool</td><td class="col2"> </td>
	</tr>
	<tr class="row21">
		<td class="col0">has_signaling_NaN</td><td class="col1">bool</td><td class="col2"> </td>
	</tr>
	<tr class="row22">
		<td class="col0">has_denorm</td><td class="col1">&lt;type&gt;_denorm_style</td><td class="col2"> </td>
	</tr>
	<tr class="row23">
		<td class="col0">has_denorm_loss</td><td class="col1">bool</td><td class="col2"> </td>
	</tr>
	<tr class="row24">
		<td class="col0">is_iec559</td><td class="col1">bool</td><td class="col2">IEC-559規格に準拠しているか？ </td>
	</tr>
	<tr class="row25">
		<td class="col0">is_bounded</td><td class="col1">bool</td><td class="col2"> </td>
	</tr>
	<tr class="row26">
		<td class="col0">is_modulo</td><td class="col1">bool</td><td class="col2"> </td>
	</tr>
	<tr class="row27">
		<td class="col0">traps</td><td class="col1">bool</td><td class="col2"> </td>
	</tr>
	<tr class="row28">
		<td class="col0">tinyness_before</td><td class="col1">bool</td><td class="col2"> </td>
	</tr>
	<tr class="row29">
		<td class="col0">round_style</td><td class="col1"> float_round_style列挙型</td><td class="col2"> (訳注)丸め方の方法。GCCでは以下の5つが定義されています <br/>
round_indeterminate <br/>
round_toward_zero <br/>
round_to_nearest <br/>
round_toward_infinity <br/>
round_toward_neg_infinity</td>
	</tr>
</table>

<p>

このテンプレートは主に、データ型が保持できる最大値と最小値の数値を見て、境界のチェックをするのに使用されます。下記のコードは、プログラムを実行しているシステムにおける、short型の最小値と最大値を表示します:
</p>
<pre class="c code c++" style="font-family:monospace;">  <span class="co2">#include &lt;limits&gt;</span>
  std<span class="sy0">::</span><a href="http://www.opengroup.org/onlinepubs/009695399/functions/cout.html"><span class="kw3">cout</span></a> <span class="sy0">&lt;&lt;</span> <span class="st0">&quot;Maximum short value: &quot;</span> <span class="sy0">&lt;&lt;</span> std<span class="sy0">::</span><span class="me2">numeric_limits</span><span class="sy0">&lt;</span>short<span class="sy0">&gt;::</span><span class="me2">max</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">&lt;&lt;</span> std<span class="sy0">::</span><span class="me2">endl</span><span class="sy0">;</span>
  std<span class="sy0">::</span><a href="http://www.opengroup.org/onlinepubs/009695399/functions/cout.html"><span class="kw3">cout</span></a> <span class="sy0">&lt;&lt;</span> <span class="st0">&quot;Minimum short value: &quot;</span> <span class="sy0">&lt;&lt;</span> std<span class="sy0">::</span><span class="me2">numeric_limits</span><span class="sy0">&lt;</span>short<span class="sy0">&gt;::</span><span class="me2">min</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="sy0">&lt;&lt;</span> std<span class="sy0">::</span><span class="me2">endl</span><span class="sy0">;</span></pre>
</div>
<!-- SECTION "型のサイズと範囲" [1459-4807] -->
<h3><a name="型宣言を読む" id="型宣言を読む">型宣言を読む</a></h3>
<div class="level3">

<p>

シンプルな型宣言を理解するのは簡単です:
</p>
<pre class="c code c++" style="font-family:monospace;">  <span class="kw4">int</span> i</pre>
<p>
しかし、以下のような複雑な型宣言を読み解くのは簡単ではありません:
</p>
<pre class="c code c++" style="font-family:monospace;">  <span class="kw4">double</span> <span class="sy0">**</span>d<span class="br0">&#91;</span><span class="nu0">8</span><span class="br0">&#93;</span>              <span class="co1">// おや？</span>
  <span class="kw4">char</span> <span class="sy0">*</span><span class="br0">&#40;</span><span class="sy0">*</span><span class="br0">&#40;</span><span class="sy0">**</span>foo <span class="br0">&#91;</span><span class="br0">&#93;</span><span class="br0">&#91;</span><span class="nu0">8</span><span class="br0">&#93;</span><span class="br0">&#41;</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#91;</span><span class="br0">&#93;</span> <span class="co1">// うわ！fooって何だ！？</span></pre>
<p>
上記の宣言を理解するには以下の３つのルールを使用します:

</p>
<ol>
<li class="level1"><div class="li"> 変数名から見始めます。上記の例の場合は、<code>d</code>と<code>foo</code>になります</div>
</li>
<li class="level1"><div class="li"> 最後にデータ型を見ます。上記の例の場合は、<code>double</code>と<code>char</code>です</div>
</li>
<li class="level1"><div class="li"> 右側に見に行けるときは右に見ていきます。カッコがついていて左にしか行けない場合には左に見ていきます</div>
</li>
</ol>

<p>

サンプル:

</p>
<table class="inline">
	<tr class="row0">
		<th class="col0">表現</th><th class="col1">意味</th>
	</tr>
	<tr class="row1">
		<td class="col0"> <code>double **d[8];</code> </td><td class="col1"> </td>
	</tr>
	<tr class="row2">
		<td class="col0"> <code><del>double</del> **<del>d</del>[8];</code> </td><td class="col1"> <strong>dはdouble型</strong> … </td>
	</tr>
	<tr class="row3">
		<td class="col0"> <code><del>double</del> **<del>d[8]</del>;</code> </td><td class="col1"> dはdouble型 <strong>を8個持つ配列</strong> … </td>
	</tr>
	<tr class="row4">
		<td class="col0"> <code><del>double</del> *<del>*d[8]</del>;</code> </td><td class="col1"> dはdouble型を8個持つ配列 <strong>へのポインタ</strong> … </td>
	</tr>
	<tr class="row5">
		<td class="col0"> <code><del>double **d[8]</del>;</code> </td><td class="col1"> dはdouble型を8個持つ配列へのポインタ <strong>へのポインタ</strong> </td>
	</tr>
</table>

<p>

もっと複雑な例:

</p>
<table class="inline">
	<tr class="row0">
		<th class="col0">表現</th><th class="col1">意味</th>
	</tr>
	<tr class="row1">
		<td class="col0"> <code>char *(*(**foo [][8])())[]</code> </td><td class="col1"> </td>
	</tr>
	<tr class="row2">
		<td class="col0"> <code><del>char</del> *(*(**<del>foo</del> [][8])())[]</code> </td><td class="col1"> <strong>fooはchar型</strong> … </td>
	</tr>
	<tr class="row3">
		<td class="col0"> <code><del>char</del> *(*(**<del>foo []</del>[8])())[]</code> </td><td class="col1"> fooはchar型 <strong>の配列</strong> … </td>
	</tr>
	<tr class="row4">
		<td class="col0"> <code><del>char</del> *(*(**<del>foo [][8]</del>)())[]</code> </td><td class="col1"> fooはchar型の配列 <strong>を8個持つ配列</strong> … </td>
	</tr>
	<tr class="row5">
		<td class="col0"> <code><del>char</del> *(*(*<del>*foo [][8]</del>)())[]</code> </td><td class="col1"> fooはchar型の配列を8個持つ配列 <strong>へのポインタ</strong> … </td>
	</tr>
	<tr class="row6">
		<td class="col0"> <code><del>char</del> *(*<del>(**foo [][8])</del>())[]</code> </td><td class="col1"> fooはchar型の配列を8個持つ配列へのポインタ <strong>へのポインタ</strong> … </td>
	</tr>
	<tr class="row7">
		<td class="col0"> <code><del>char</del> *(*<del>(**foo [][8])()</del>)[]</code> </td><td class="col1"> fooはchar型の配列を8個持つ配列へのポインタへのポインタ <strong>を返す関数</strong> … </td>
	</tr>
	<tr class="row8">
		<td class="col0"> <code><del>char</del> *<del>(*(**foo [][8])())</del>[]</code> </td><td class="col1"> fooはchar型の配列を8個持つ配列へのポインタへのポインタを返す関数 <strong>へのポインタ</strong> … </td>
	</tr>
	<tr class="row9">
		<td class="col0"> <code><del>char</del> *<del>(*(**foo [][8])())[]</del></code> </td><td class="col1"> fooはchar型の配列を8個持つ配列へのポインタへのポインタを返す関数へのポインタ <strong>の配列</strong> … </td>
	</tr>
	<tr class="row10">
		<td class="col0"> <code><del>char *(*(**foo [][8])())[]</del></code> </td><td class="col1"> fooはchar型の配列を8個持つ配列へのポインタへのポインタを返す関数へのポインタの配列 <strong>へのポインタ</strong> </td>
	</tr>
</table>

<p>

もっと詳しく知りたい場合には、<a href="http://www.unixwiz.net/techtips/reading-cdecl.html" class="urlextern" title="http://www.unixwiz.net/techtips/reading-cdecl.html"  rel="nofollow">http://www.unixwiz.net/techtips/reading-cdecl.html</a>にある、Steve Fried氏が書いた「どのようにCの宣言を読むか」というすばらしい説明を参照してみてください。
</p>

</div>
<!-- SECTION "型宣言を読む" [4808-] --></div>
</body>
</html>
