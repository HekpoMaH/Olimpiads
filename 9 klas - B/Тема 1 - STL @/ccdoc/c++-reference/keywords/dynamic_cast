<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"
 lang="en" dir="ltr">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>keywords:dynamic_cast</title>
<meta name="generator" content="DokuWiki Release 2009-12-25c &quot;Lemming&quot;" />
<meta name="robots" content="index,follow" />
<meta name="date" content="2008-12-21T16:21:14-0800" />
<meta name="keywords" content="keywords,dynamic_cast" />
<link rel="search" type="application/opensearchdescription+xml" href="http://www.cppreference.com/wiki/lib/exe/opensearch.php" title="C++ Reference" />
<link rel="start" href="../index.html" />
<link rel="contents" href="http://www.cppreference.com/wiki/keywords/dynamic_cast?do=index" title="Index" />
<link rel="alternate" type="application/rss+xml" title="Recent Changes" href="http://www.cppreference.com/wiki/feed.php" />
<link rel="alternate" type="application/rss+xml" title="Current Namespace" href="http://www.cppreference.com/wiki/feed.php?mode=list&amp;ns=keywords" />
<link rel="alternate" type="text/html" title="Plain HTML" href="http://www.cppreference.com/wiki/_export/xhtml/keywords/dynamic_cast" />
<link rel="alternate" type="text/plain" title="Wiki Markup" href="http://www.cppreference.com/wiki/_export/raw/keywords/dynamic_cast" />
<link rel="canonical" href="dynamic_cast" />
<link rel="stylesheet" media="all" type="text/css" href="../lib/exe/css.php@s=all&amp;t=custom1&amp;tseed=1265723194" />
<link rel="stylesheet" media="screen" type="text/css" href="../lib/exe/css.php@t=custom1&amp;tseed=1265723194" />
<link rel="stylesheet" media="print" type="text/css" href="../lib/exe/css.php@s=print&amp;t=custom1&amp;tseed=1265723194" />
<script type="text/javascript" charset="utf-8" ><!--//--><![CDATA[//><!--
var NS='keywords';var JSINFO = {"id":"keywords:dynamic_cast","namespace":"keywords"};
//--><!]]></script>
<script type="text/javascript" charset="utf-8" src="../lib/exe/js.php@tseed=1265723194" ></script>
</head>
<body>
<div class="dokuwiki export">



<h2><a name="dynamic_cast" id="dynamic_cast">dynamic_cast</a></h2>
<div class="level2">

<p>
Syntax:
</p>
<pre class="cpp code cpp" style="font-family:monospace;">    TYPE<span class="sy3">&amp;</span> <span class="kw2">dynamic_cast</span><span class="sy1">&lt;</span>TYPE<span class="sy3">&amp;</span><span class="sy1">&gt;</span> <span class="br0">&#40;</span>object<span class="br0">&#41;</span><span class="sy4">;</span>
    TYPE<span class="sy2">*</span> <span class="kw2">dynamic_cast</span><span class="sy1">&lt;</span>TYPE<span class="sy2">*</span><span class="sy1">&gt;</span> <span class="br0">&#40;</span>object<span class="br0">&#41;</span><span class="sy4">;</span></pre>
<p>
The dynamic_cast keyword casts a datum from one pointer or reference type to another, performing a runtime check to ensure the validity of the cast. 
</p>

<p>
If you attempt to cast to a pointer type, and that type is not an actual type of the argument object, then the result of the cast will be <strong>NULL</strong>.
</p>

<p>
If you attempt to cast to a reference type, and that type is not an actual type of the argument object, then the cast will throw a <strong>std::bad_cast</strong> exception.
</p>
<pre class="cpp code cpp" style="font-family:monospace;">  <span class="kw4">struct</span> A <span class="br0">&#123;</span>
    <span class="kw2">virtual</span> <span class="kw4">void</span> f<span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span> <span class="br0">&#125;</span>
  <span class="br0">&#125;</span><span class="sy4">;</span>
  <span class="kw4">struct</span> B <span class="sy4">:</span> <span class="kw2">public</span> A <span class="br0">&#123;</span> <span class="br0">&#125;</span><span class="sy4">;</span>
  <span class="kw4">struct</span> C <span class="br0">&#123;</span> <span class="br0">&#125;</span><span class="sy4">;</span>
&nbsp;
  <span class="kw4">void</span> f <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
    A a<span class="sy4">;</span>
    B b<span class="sy4">;</span>
&nbsp;
    A<span class="sy2">*</span> ap <span class="sy1">=</span> <span class="sy3">&amp;</span>b<span class="sy4">;</span>
    B<span class="sy2">*</span> b1 <span class="sy1">=</span> <span class="kw2">dynamic_cast</span><span class="sy1">&lt;</span>B<span class="sy2">*</span><span class="sy1">&gt;</span> <span class="br0">&#40;</span><span class="sy3">&amp;</span>a<span class="br0">&#41;</span><span class="sy4">;</span>  <span class="co1">// NULL, because 'a' is not a 'B'</span>
    B<span class="sy2">*</span> b2 <span class="sy1">=</span> <span class="kw2">dynamic_cast</span><span class="sy1">&lt;</span>B<span class="sy2">*</span><span class="sy1">&gt;</span> <span class="br0">&#40;</span>ap<span class="br0">&#41;</span><span class="sy4">;</span>  <span class="co1">// 'b'</span>
    C<span class="sy2">*</span> c <span class="sy1">=</span> <span class="kw2">dynamic_cast</span><span class="sy1">&lt;</span>C<span class="sy2">*</span><span class="sy1">&gt;</span> <span class="br0">&#40;</span>ap<span class="br0">&#41;</span><span class="sy4">;</span>   <span class="co1">// NULL.</span>
&nbsp;
    A<span class="sy3">&amp;</span> ar <span class="sy1">=</span> <span class="kw2">dynamic_cast</span><span class="sy1">&lt;</span>A<span class="sy3">&amp;</span><span class="sy1">&gt;</span> <span class="br0">&#40;</span><span class="sy2">*</span>ap<span class="br0">&#41;</span><span class="sy4">;</span> <span class="co1">// Ok.</span>
    B<span class="sy3">&amp;</span> br <span class="sy1">=</span> <span class="kw2">dynamic_cast</span><span class="sy1">&lt;</span>B<span class="sy3">&amp;</span><span class="sy1">&gt;</span> <span class="br0">&#40;</span><span class="sy2">*</span>ap<span class="br0">&#41;</span><span class="sy4">;</span> <span class="co1">// Ok.</span>
    C<span class="sy3">&amp;</span> cr <span class="sy1">=</span> <span class="kw2">dynamic_cast</span><span class="sy1">&lt;</span>C<span class="sy3">&amp;</span><span class="sy1">&gt;</span> <span class="br0">&#40;</span><span class="sy2">*</span>ap<span class="br0">&#41;</span><span class="sy4">;</span> <span class="co1">// std::bad_cast</span>
  <span class="br0">&#125;</span></pre>
<p>

Related Topics: <a href="const_cast" class="wikilink1" title="keywords:const_cast">const_cast</a>, <a href="reinterpret_cast" class="wikilink1" title="keywords:reinterpret_cast">reinterpret_cast</a>, <a href="static_cast" class="wikilink1" title="keywords:static_cast">static_cast</a>, <a href="casting_comparison" class="wikilink1" title="keywords:casting_comparison">A comparison of the C++ casting operators</a>
</p>

</div>
<!-- SECTION "dynamic_cast" [3-] --></div>
</body>
</html>
