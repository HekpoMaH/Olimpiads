<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"
 lang="en" dir="ltr">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>stl:algorithm:lower_bound</title>
<meta name="generator" content="DokuWiki Release 2009-12-25c &quot;Lemming&quot;" />
<meta name="robots" content="index,follow" />
<meta name="date" content="2009-10-09T01:50:53-0700" />
<meta name="keywords" content="stl,algorithm,lower_bound" />
<link rel="search" type="application/opensearchdescription+xml" href="http://www.cppreference.com/wiki/lib/exe/opensearch.php" title="C++ Reference" />
<link rel="start" href="../../index.html" />
<link rel="contents" href="http://www.cppreference.com/wiki/stl/algorithm/lower_bound?do=index" title="Index" />
<link rel="alternate" type="application/rss+xml" title="Recent Changes" href="http://www.cppreference.com/wiki/feed.php" />
<link rel="alternate" type="application/rss+xml" title="Current Namespace" href="http://www.cppreference.com/wiki/feed.php?mode=list&amp;ns=stl:algorithm" />
<link rel="alternate" type="text/html" title="Plain HTML" href="http://www.cppreference.com/wiki/_export/xhtml/stl/algorithm/lower_bound" />
<link rel="alternate" type="text/plain" title="Wiki Markup" href="http://www.cppreference.com/wiki/_export/raw/stl/algorithm/lower_bound" />
<link rel="canonical" href="lower_bound" />
<link rel="stylesheet" media="all" type="text/css" href="../../lib/exe/css.php@s=all&amp;t=custom1&amp;tseed=1265723194" />
<link rel="stylesheet" media="screen" type="text/css" href="../../lib/exe/css.php@t=custom1&amp;tseed=1265723194" />
<link rel="stylesheet" media="print" type="text/css" href="../../lib/exe/css.php@s=print&amp;t=custom1&amp;tseed=1265723194" />
<script type="text/javascript" charset="utf-8" ><!--//--><![CDATA[//><!--
var NS='stl:algorithm';var JSINFO = {"id":"stl:algorithm:lower_bound","namespace":"stl:algorithm"};
//--><!]]></script>
<script type="text/javascript" charset="utf-8" src="../../lib/exe/js.php@tseed=1265723194" ></script>
</head>
<body>
<div class="dokuwiki export">



<h2><a name="lower_bound" id="lower_bound">lower_bound</a></h2>
<div class="level2">

<p>
Syntax:
</p>
<pre class="c code c++" style="font-family:monospace;">    <span class="co2">#include &lt;algorithm&gt;</span>
    forward_iterator lower_bound<span class="br0">&#40;</span> forward_iterator first<span class="sy0">,</span> forward_iterator last<span class="sy0">,</span> <span class="kw4">const</span> TYPE<span class="sy0">&amp;</span> val <span class="br0">&#41;</span><span class="sy0">;</span>
    forward_iterator lower_bound<span class="br0">&#40;</span> forward_iterator first<span class="sy0">,</span> forward_iterator last<span class="sy0">,</span> <span class="kw4">const</span> TYPE<span class="sy0">&amp;</span> val<span class="sy0">,</span> CompFn f <span class="br0">&#41;</span><span class="sy0">;</span></pre>
<p>
The lower_bound() function is a type of binary_search(). This function searches
for the first place that val can be inserted into the ordered range defined by
first and last that will not mess up the existing ordering; or,
equivalently, it returns the iterator to the first element that is not less than val,
or “end” if all elements are less than val.  This function
requires the elements to be in order.
</p>

<p>
The return value of lower_bound() is an iterator that points to the location
where val can be safely inserted. Unless the comparison function f is
specified, the &lt; operator is used for ordering.
</p>

<p>
For example, the following code uses lower_bound() to insert the number 7 into
an ordered vector of integers:
</p>
<pre class="c code c++" style="font-family:monospace;">   vector<span class="sy0">&lt;</span>int<span class="sy0">&gt;</span> nums<span class="sy0">;</span>
   nums.<span class="me1">push_back</span><span class="br0">&#40;</span> <span class="sy0">-</span>242 <span class="br0">&#41;</span><span class="sy0">;</span>
   nums.<span class="me1">push_back</span><span class="br0">&#40;</span> <span class="sy0">-</span>1 <span class="br0">&#41;</span><span class="sy0">;</span>
   nums.<span class="me1">push_back</span><span class="br0">&#40;</span> 0 <span class="br0">&#41;</span><span class="sy0">;</span>
   nums.<span class="me1">push_back</span><span class="br0">&#40;</span> 5 <span class="br0">&#41;</span><span class="sy0">;</span>
   nums.<span class="me1">push_back</span><span class="br0">&#40;</span> 8 <span class="br0">&#41;</span><span class="sy0">;</span>
   nums.<span class="me1">push_back</span><span class="br0">&#40;</span> 8 <span class="br0">&#41;</span><span class="sy0">;</span>
   nums.<span class="me1">push_back</span><span class="br0">&#40;</span> 11 <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
   <a href="http://www.opengroup.org/onlinepubs/009695399/functions/cout.html"><span class="kw3">cout</span></a> <span class="sy0">&lt;&lt;</span> <span class="st0">&quot;Before nums is: &quot;</span><span class="sy0">;</span>
   <span class="kw1">for</span><span class="br0">&#40;</span> <span class="kw4">unsigned</span> <span class="kw4">int</span> i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> nums.<span class="me1">size</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span> i<span class="sy0">++</span> <span class="br0">&#41;</span> <span class="br0">&#123;</span>
     <a href="http://www.opengroup.org/onlinepubs/009695399/functions/cout.html"><span class="kw3">cout</span></a> <span class="sy0">&lt;&lt;</span> nums<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="sy0">&lt;&lt;</span> <span class="st0">&quot; &quot;</span><span class="sy0">;</span>
   <span class="br0">&#125;</span>
   <a href="http://www.opengroup.org/onlinepubs/009695399/functions/cout.html"><span class="kw3">cout</span></a> <span class="sy0">&lt;&lt;</span> endl<span class="sy0">;</span>
&nbsp;
   vector<span class="sy0">&lt;</span>int<span class="sy0">&gt;::</span><span class="me2">iterator</span> result<span class="sy0">;</span>
   <span class="kw4">int</span> new_val <span class="sy0">=</span> <span class="nu0">7</span><span class="sy0">;</span>
&nbsp;
   result <span class="sy0">=</span> lower_bound<span class="br0">&#40;</span> nums.<span class="me1">begin</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">,</span> nums.<span class="me1">end</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">,</span> new_val <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
   nums.<span class="me1">insert</span><span class="br0">&#40;</span> result<span class="sy0">,</span> new_val <span class="br0">&#41;</span><span class="sy0">;</span>
&nbsp;
   <a href="http://www.opengroup.org/onlinepubs/009695399/functions/cout.html"><span class="kw3">cout</span></a> <span class="sy0">&lt;&lt;</span> <span class="st0">&quot;After, nums is: &quot;</span><span class="sy0">;</span>
   <span class="kw1">for</span><span class="br0">&#40;</span> <span class="kw4">unsigned</span> <span class="kw4">int</span> i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> nums.<span class="me1">size</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span> i<span class="sy0">++</span> <span class="br0">&#41;</span> <span class="br0">&#123;</span>
     <a href="http://www.opengroup.org/onlinepubs/009695399/functions/cout.html"><span class="kw3">cout</span></a> <span class="sy0">&lt;&lt;</span> nums<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="sy0">&lt;&lt;</span> <span class="st0">&quot; &quot;</span><span class="sy0">;</span>
   <span class="br0">&#125;</span>
   <a href="http://www.opengroup.org/onlinepubs/009695399/functions/cout.html"><span class="kw3">cout</span></a> <span class="sy0">&lt;&lt;</span> endl<span class="sy0">;</span></pre>
<p>
The above code produces the following output:
</p>
<pre class="code">
   Before nums is: -242 -1 0 5 8 8 11
   After, nums is: -242 -1 0 5 7 8 8 11</pre>
<p>
lower_bound() runs in <a href="../../complexity" class="wikilink1" title="complexity">logarithmic time</a>.
</p>

<p>
Related Topics: <a href="binary_search" class="wikilink1" title="stl:algorithm:binary_search">binary_search</a>, <a href="equal_range" class="wikilink1" title="stl:algorithm:equal_range">equal_range</a>, <a href="upper_bound" class="wikilink1" title="stl:algorithm:upper_bound">upper_bound</a>
</p>

</div>
<!-- SECTION "lower_bound" [3-] --></div>
</body>
</html>
