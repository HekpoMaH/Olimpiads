<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"
 lang="en" dir="ltr">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>stl:algorithm:start</title>
<meta name="generator" content="DokuWiki Release 2009-12-25c &quot;Lemming&quot;" />
<meta name="robots" content="index,follow" />
<meta name="date" content="2010-01-19T05:29:18-0800" />
<meta name="keywords" content="stl,algorithm,start" />
<link rel="search" type="application/opensearchdescription+xml" href="http://www.cppreference.com/wiki/lib/exe/opensearch.php" title="C++ Reference" />
<link rel="start" href="../../index.html" />
<link rel="contents" href="http://www.cppreference.com/wiki/stl/algorithm/start?do=index" title="Index" />
<link rel="alternate" type="application/rss+xml" title="Recent Changes" href="http://www.cppreference.com/wiki/feed.php" />
<link rel="alternate" type="application/rss+xml" title="Current Namespace" href="http://www.cppreference.com/wiki/feed.php?mode=list&amp;ns=stl:algorithm" />
<link rel="alternate" type="text/html" title="Plain HTML" href="http://www.cppreference.com/wiki/_export/xhtml/stl/algorithm/start" />
<link rel="alternate" type="text/plain" title="Wiki Markup" href="http://www.cppreference.com/wiki/_export/raw/stl/algorithm/start" />
<link rel="canonical" href="start" />
<link rel="stylesheet" media="all" type="text/css" href="../../lib/exe/css.php@s=all&amp;t=custom1&amp;tseed=1265723194" />
<link rel="stylesheet" media="screen" type="text/css" href="../../lib/exe/css.php@t=custom1&amp;tseed=1265723194" />
<link rel="stylesheet" media="print" type="text/css" href="../../lib/exe/css.php@s=print&amp;t=custom1&amp;tseed=1265723194" />
<script type="text/javascript" charset="utf-8" ><!--//--><![CDATA[//><!--
var NS='stl:algorithm';var JSINFO = {"id":"stl:algorithm:start","namespace":"stl:algorithm"};
//--><!]]></script>
<script type="text/javascript" charset="utf-8" src="../../lib/exe/js.php@tseed=1265723194" ></script>
</head>
<body>
<div class="dokuwiki export">



<h1><a name="c_algorithms" id="c_algorithms">C++ Algorithms</a></h1>
<div class="level1">

<p>
The following functions are defined in &lt;algorithm&gt; or &lt;numeric&gt;
, and are part of the std namespace.

</p>
<table class="inline">
	<tr class="row0">
		<td class="col0"><a href="accumulate" class="wikilink1" title="stl:algorithm:accumulate">accumulate</a></td><td class="col1">sum up a range of elements</td>
	</tr>
	<tr class="row1">
		<td class="col0"><a href="adjacent_difference" class="wikilink1" title="stl:algorithm:adjacent_difference">adjacent_difference</a></td><td class="col1">compute the differences between adjacent elements in a range</td>
	</tr>
	<tr class="row2">
		<td class="col0"><a href="adjacent_find" class="wikilink1" title="stl:algorithm:adjacent_find">adjacent_find</a></td><td class="col1">finds two identical (or some other relationship) items adjacent to each other</td>
	</tr>
	<tr class="row3">
		<td class="col0"><a href="binary_search" class="wikilink1" title="stl:algorithm:binary_search">binary_search</a></td><td class="col1">determine if an element exists in a certain range</td>
	</tr>
	<tr class="row4">
		<td class="col0"><a href="copy" class="wikilink1" title="stl:algorithm:copy">copy</a></td><td class="col1">copy some range of elements to a new location</td>
	</tr>
	<tr class="row5">
		<td class="col0"><a href="copy_backward" class="wikilink1" title="stl:algorithm:copy_backward">copy_backward</a></td><td class="col1">copy a range of elements in backwards order</td>
	</tr>
	<tr class="row6">
		<td class="col0"><a href="count" class="wikilink1" title="stl:algorithm:count">count</a></td><td class="col1">return the number of elements matching a given value</td>
	</tr>
	<tr class="row7">
		<td class="col0"><a href="count_if" class="wikilink1" title="stl:algorithm:count_if">count_if</a></td><td class="col1">return the number of elements for which a predicate is true</td>
	</tr>
	<tr class="row8">
		<td class="col0"><a href="equal" class="wikilink1" title="stl:algorithm:equal">equal</a></td><td class="col1">determine if two sets of elements are the same</td>
	</tr>
	<tr class="row9">
		<td class="col0"><a href="equal_range" class="wikilink1" title="stl:algorithm:equal_range">equal_range</a></td><td class="col1">search for a range of elements that are all equal to a certain element</td>
	</tr>
	<tr class="row10">
		<td class="col0"><a href="fill" class="wikilink1" title="stl:algorithm:fill">fill</a></td><td class="col1">assign a range of elements a certain value</td>
	</tr>
	<tr class="row11">
		<td class="col0"><a href="fill_n" class="wikilink1" title="stl:algorithm:fill_n">fill_n</a></td><td class="col1">assign a value to some number of elements</td>
	</tr>
	<tr class="row12">
		<td class="col0"><a href="find" class="wikilink1" title="stl:algorithm:find">find</a></td><td class="col1">find a value in a given range</td>
	</tr>
	<tr class="row13">
		<td class="col0"><a href="find_end" class="wikilink1" title="stl:algorithm:find_end">find_end</a></td><td class="col1">find the last sequence of elements in a certain range</td>
	</tr>
	<tr class="row14">
		<td class="col0"><a href="find_first_of" class="wikilink1" title="stl:algorithm:find_first_of">find_first_of</a></td><td class="col1">search for any one of a set of elements</td>
	</tr>
	<tr class="row15">
		<td class="col0"><a href="find_if" class="wikilink1" title="stl:algorithm:find_if">find_if</a></td><td class="col1">find the first element for which a certain predicate is true</td>
	</tr>
	<tr class="row16">
		<td class="col0"><a href="for_each" class="wikilink1" title="stl:algorithm:for_each">for_each</a></td><td class="col1">apply a function to a range of elements</td>
	</tr>
	<tr class="row17">
		<td class="col0"><a href="generate" class="wikilink1" title="stl:algorithm:generate">generate</a></td><td class="col1">saves the result of a function in a range</td>
	</tr>
	<tr class="row18">
		<td class="col0"><a href="generate_n" class="wikilink1" title="stl:algorithm:generate_n">generate_n</a></td><td class="col1">saves the result of N applications of a function</td>
	</tr>
	<tr class="row19">
		<td class="col0"><a href="includes" class="wikilink1" title="stl:algorithm:includes">includes</a></td><td class="col1">returns true if one set is a subset of another</td>
	</tr>
	<tr class="row20">
		<td class="col0"><a href="inner_product" class="wikilink1" title="stl:algorithm:inner_product">inner_product</a></td><td class="col1">compute the inner product of two ranges of elements</td>
	</tr>
	<tr class="row21">
		<td class="col0"><a href="inplace_merge" class="wikilink1" title="stl:algorithm:inplace_merge">inplace_merge</a></td><td class="col1">merge two ordered ranges in-place</td>
	</tr>
	<tr class="row22">
		<td class="col0"><a href="is_heap" class="wikilink1" title="stl:algorithm:is_heap">is_heap</a></td><td class="col1">returns true if a given range is a heap</td>
	</tr>
	<tr class="row23">
		<td class="col0"><a href="iter_swap" class="wikilink1" title="stl:algorithm:iter_swap">iter_swap</a></td><td class="col1">swaps the elements pointed to by two iterators</td>
	</tr>
	<tr class="row24">
		<td class="col0"><a href="lexicographical_compare" class="wikilink1" title="stl:algorithm:lexicographical_compare">lexicographical_compare</a></td><td class="col1">returns true if one range is lexicographically less than another</td>
	</tr>
	<tr class="row25">
		<td class="col0"><a href="lower_bound" class="wikilink1" title="stl:algorithm:lower_bound">lower_bound</a></td><td class="col1">search for the first place that a value can be inserted while preserving order</td>
	</tr>
	<tr class="row26">
		<td class="col0"><a href="make_heap" class="wikilink1" title="stl:algorithm:make_heap">make_heap</a></td><td class="col1">creates a heap out of a range of elements</td>
	</tr>
	<tr class="row27">
		<td class="col0"><a href="max" class="wikilink1" title="stl:algorithm:max">max</a></td><td class="col1">returns the larger of two elements</td>
	</tr>
	<tr class="row28">
		<td class="col0"><a href="max_element" class="wikilink1" title="stl:algorithm:max_element">max_element</a></td><td class="col1">returns the largest element in a range</td>
	</tr>
	<tr class="row29">
		<td class="col0"><a href="merge" class="wikilink1" title="stl:algorithm:merge">merge</a></td><td class="col1">merge two sorted ranges</td>
	</tr>
	<tr class="row30">
		<td class="col0"><a href="min" class="wikilink1" title="stl:algorithm:min">min</a></td><td class="col1">returns the smaller of two elements</td>
	</tr>
	<tr class="row31">
		<td class="col0"><a href="min_element" class="wikilink1" title="stl:algorithm:min_element">min_element</a></td><td class="col1">returns the smallest element in a range</td>
	</tr>
	<tr class="row32">
		<td class="col0"><a href="mismatch" class="wikilink1" title="stl:algorithm:mismatch">mismatch</a></td><td class="col1">finds the first position where two ranges differ</td>
	</tr>
	<tr class="row33">
		<td class="col0"><a href="next_permutation" class="wikilink1" title="stl:algorithm:next_permutation">next_permutation</a></td><td class="col1">generates the next greater lexicographic permutation of a range of elements</td>
	</tr>
	<tr class="row34">
		<td class="col0"><a href="nth_element" class="wikilink1" title="stl:algorithm:nth_element">nth_element</a></td><td class="col1">put one element in its sorted location and make sure that no elements to its left are greater than any elements to its right</td>
	</tr>
	<tr class="row35">
		<td class="col0"><a href="partial_sort" class="wikilink1" title="stl:algorithm:partial_sort">partial_sort</a></td><td class="col1">sort the first N elements of a range</td>
	</tr>
	<tr class="row36">
		<td class="col0"><a href="partial_sort_copy" class="wikilink1" title="stl:algorithm:partial_sort_copy">partial_sort_copy</a></td><td class="col1">copy and partially sort a range of elements</td>
	</tr>
	<tr class="row37">
		<td class="col0"><a href="partial_sum" class="wikilink1" title="stl:algorithm:partial_sum">partial_sum</a></td><td class="col1">compute the partial sum of a range of elements</td>
	</tr>
	<tr class="row38">
		<td class="col0"><a href="partition" class="wikilink1" title="stl:algorithm:partition">partition</a></td><td class="col1">divide a range of elements into two groups</td>
	</tr>
	<tr class="row39">
		<td class="col0"><a href="pop_heap" class="wikilink1" title="stl:algorithm:pop_heap">pop_heap</a></td><td class="col1">remove the largest element from a heap</td>
	</tr>
	<tr class="row40">
		<td class="col0"><a href="prev_permutation" class="wikilink1" title="stl:algorithm:prev_permutation">prev_permutation</a></td><td class="col1">generates the next smaller lexicographic permutation of a range of elements</td>
	</tr>
	<tr class="row41">
		<td class="col0"><a href="push_heap" class="wikilink1" title="stl:algorithm:push_heap">push_heap</a></td><td class="col1">add an element to a heap</td>
	</tr>
	<tr class="row42">
		<td class="col0"><a href="random_shuffle" class="wikilink1" title="stl:algorithm:random_shuffle">random_shuffle</a></td><td class="col1">randomly re-order elements in some range</td>
	</tr>
	<tr class="row43">
		<td class="col0"><a href="remove" class="wikilink1" title="stl:algorithm:remove">remove</a></td><td class="col1">remove elements equal to certain value</td>
	</tr>
	<tr class="row44">
		<td class="col0"><a href="remove_copy" class="wikilink1" title="stl:algorithm:remove_copy">remove_copy</a></td><td class="col1">copy a range of elements omitting those that match a certain value</td>
	</tr>
	<tr class="row45">
		<td class="col0"><a href="remove_copy_if" class="wikilink1" title="stl:algorithm:remove_copy_if">remove_copy_if</a></td><td class="col1">create a copy of a range of elements, omitting any for which a predicate is true</td>
	</tr>
	<tr class="row46">
		<td class="col0"><a href="remove_if" class="wikilink1" title="stl:algorithm:remove_if">remove_if</a></td><td class="col1">remove all elements for which a predicate is true</td>
	</tr>
	<tr class="row47">
		<td class="col0"><a href="replace" class="wikilink1" title="stl:algorithm:replace">replace</a></td><td class="col1">replace every occurrence of some value in a range with another value</td>
	</tr>
	<tr class="row48">
		<td class="col0"><a href="replace_copy" class="wikilink1" title="stl:algorithm:replace_copy">replace_copy</a></td><td class="col1">copy a range, replacing certain elements with new ones</td>
	</tr>
	<tr class="row49">
		<td class="col0"><a href="replace_copy_if" class="wikilink1" title="stl:algorithm:replace_copy_if">replace_copy_if</a></td><td class="col1">copy a range of elements, replacing those for which a predicate is true</td>
	</tr>
	<tr class="row50">
		<td class="col0"><a href="replace_if" class="wikilink1" title="stl:algorithm:replace_if">replace_if</a></td><td class="col1">change the values of elements for which a predicate is true</td>
	</tr>
	<tr class="row51">
		<td class="col0"><a href="reverse" class="wikilink1" title="stl:algorithm:reverse">reverse</a></td><td class="col1">reverse elements in some range</td>
	</tr>
	<tr class="row52">
		<td class="col0"><a href="reverse_copy" class="wikilink1" title="stl:algorithm:reverse_copy">reverse_copy</a></td><td class="col1">create a copy of a range that is reversed</td>
	</tr>
	<tr class="row53">
		<td class="col0"><a href="rotate" class="wikilink1" title="stl:algorithm:rotate">rotate</a></td><td class="col1">move the elements in some range to the left by some amount</td>
	</tr>
	<tr class="row54">
		<td class="col0"><a href="rotate_copy" class="wikilink1" title="stl:algorithm:rotate_copy">rotate_copy</a></td><td class="col1">copy and rotate a range of elements</td>
	</tr>
	<tr class="row55">
		<td class="col0"><a href="search" class="wikilink1" title="stl:algorithm:search">search</a></td><td class="col1">search for a range of elements</td>
	</tr>
	<tr class="row56">
		<td class="col0"><a href="search_n" class="wikilink1" title="stl:algorithm:search_n">search_n</a></td><td class="col1">search for N consecutive copies of an element in some range</td>
	</tr>
	<tr class="row57">
		<td class="col0"><a href="set_difference" class="wikilink1" title="stl:algorithm:set_difference">set_difference</a></td><td class="col1">computes the difference between two sets</td>
	</tr>
	<tr class="row58">
		<td class="col0"><a href="set_intersection" class="wikilink1" title="stl:algorithm:set_intersection">set_intersection</a></td><td class="col1">computes the intersection of two sets</td>
	</tr>
	<tr class="row59">
		<td class="col0"><a href="set_symmetric_difference" class="wikilink1" title="stl:algorithm:set_symmetric_difference">set_symmetric_difference</a></td><td class="col1">computes the symmetric difference between two sets</td>
	</tr>
	<tr class="row60">
		<td class="col0"><a href="set_union" class="wikilink1" title="stl:algorithm:set_union">set_union</a></td><td class="col1">computes the union of two sets</td>
	</tr>
	<tr class="row61">
		<td class="col0"><a href="sort" class="wikilink1" title="stl:algorithm:sort">sort</a></td><td class="col1">sort a range into ascending order</td>
	</tr>
	<tr class="row62">
		<td class="col0"><a href="sort_heap" class="wikilink1" title="stl:algorithm:sort_heap">sort_heap</a></td><td class="col1">turns a heap into a sorted range of elements</td>
	</tr>
	<tr class="row63">
		<td class="col0"><a href="stable_partition" class="wikilink1" title="stl:algorithm:stable_partition">stable_partition</a></td><td class="col1">divide elements into two groups while preserving their relative order</td>
	</tr>
	<tr class="row64">
		<td class="col0"><a href="stable_sort" class="wikilink1" title="stl:algorithm:stable_sort">stable_sort</a></td><td class="col1">sort a range of elements while preserving order between equal elements</td>
	</tr>
	<tr class="row65">
		<td class="col0"><a href="swap" class="wikilink1" title="stl:algorithm:swap">swap</a></td><td class="col1">swap the values of two objects</td>
	</tr>
	<tr class="row66">
		<td class="col0"><a href="swap_ranges" class="wikilink1" title="stl:algorithm:swap_ranges">swap_ranges</a></td><td class="col1">swaps two ranges of elements</td>
	</tr>
	<tr class="row67">
		<td class="col0"><a href="transform" class="wikilink1" title="stl:algorithm:transform">transform</a></td><td class="col1">applies a function to a range of elements</td>
	</tr>
	<tr class="row68">
		<td class="col0"><a href="unique" class="wikilink1" title="stl:algorithm:unique">unique</a></td><td class="col1">remove consecutive duplicate elements in a range</td>
	</tr>
	<tr class="row69">
		<td class="col0"><a href="unique_copy" class="wikilink1" title="stl:algorithm:unique_copy">unique_copy</a></td><td class="col1">creates a copy of some range of elements that contains no consecutive duplicates</td>
	</tr>
	<tr class="row70">
		<td class="col0"><a href="upper_bound" class="wikilink1" title="stl:algorithm:upper_bound">upper_bound</a></td><td class="col1">searches for the last place that a value can be inserted while preserving order (first place that is greater than the value)</td>
	</tr>
</table>

</div>
</div>
</body>
</html>
