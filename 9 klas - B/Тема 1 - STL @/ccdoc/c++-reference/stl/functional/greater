<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"
 lang="en" dir="ltr">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>stl:functional:greater</title>
<meta name="generator" content="DokuWiki Release 2009-12-25c &quot;Lemming&quot;" />
<meta name="robots" content="index,follow" />
<meta name="date" content="2010-01-05T06:44:42-0800" />
<meta name="keywords" content="stl,functional,greater" />
<link rel="search" type="application/opensearchdescription+xml" href="http://www.cppreference.com/wiki/lib/exe/opensearch.php" title="C++ Reference" />
<link rel="start" href="../../index.html" />
<link rel="contents" href="http://www.cppreference.com/wiki/stl/functional/greater?do=index" title="Index" />
<link rel="alternate" type="application/rss+xml" title="Recent Changes" href="http://www.cppreference.com/wiki/feed.php" />
<link rel="alternate" type="application/rss+xml" title="Current Namespace" href="http://www.cppreference.com/wiki/feed.php?mode=list&amp;ns=stl:functional" />
<link rel="alternate" type="text/html" title="Plain HTML" href="http://www.cppreference.com/wiki/_export/xhtml/stl/functional/greater" />
<link rel="alternate" type="text/plain" title="Wiki Markup" href="http://www.cppreference.com/wiki/_export/raw/stl/functional/greater" />
<link rel="canonical" href="greater" />
<link rel="stylesheet" media="all" type="text/css" href="../../lib/exe/css.php@s=all&amp;t=custom1&amp;tseed=1265723194" />
<link rel="stylesheet" media="screen" type="text/css" href="../../lib/exe/css.php@t=custom1&amp;tseed=1265723194" />
<link rel="stylesheet" media="print" type="text/css" href="../../lib/exe/css.php@s=print&amp;t=custom1&amp;tseed=1265723194" />
<script type="text/javascript" charset="utf-8" ><!--//--><![CDATA[//><!--
var NS='stl:functional';var JSINFO = {"id":"stl:functional:greater","namespace":"stl:functional"};
//--><!]]></script>
<script type="text/javascript" charset="utf-8" src="../../lib/exe/js.php@tseed=1265723194" ></script>
</head>
<body>
<div class="dokuwiki export">



<h1><a name="greater" id="greater">greater</a></h1>
<div class="level1">

</div>

<h5><a name="template_class_t_struct_greater" id="template_class_t_struct_greater">template &lt;class T&gt; struct greater;</a></h5>
<div class="level5">

<p>
Function object class for greater-than inequality comparison
</p>

<p>
This class defines function objects for the “greater than” inequality comparison operation.
</p>

<p>
Generically, function objects are instances of a class with member function operator() defined. This member function allows the object to be used with the same syntax as a regular function call, and therefore it can be used in templates instead of a pointer to a function.
</p>

<p>
greater has its operator() member defined such that it returns true if its first argument compares greater than the second one using operator&gt;, and false otherwise.
</p>

<p>
This class is derived from binary_function and is defined as:
 template &lt;class T&gt; struct greater : binary_function &lt;T,T,bool&gt; {
</p>
<pre class="code">bool operator() (const T&amp; x, const T&amp; y) const
  {return x&gt;y;}</pre>

<p>
};
</p>

<p>
Objects of this class can be used with some standard algorithms such as sort, merge or lower_bound.

</p>

</div>
<!-- SECTION "greater" [1-960] -->
<h3><a name="members" id="members">**Members**</a></h3>
<div class="level3">

<p>

T operator() (const T&amp; x, const T&amp; y) 
Member function returning the result of the comparison x&gt;y. 
</p>

</div>

<h4><a name="greater_example" id="greater_example">// greater example</a></h4>
<div class="level4">
<pre class="c code c++" style="font-family:monospace;"><span class="co2">#include &lt;iostream&gt;</span>
<span class="co2">#include &lt;functional&gt;</span>
<span class="co2">#include &lt;algorithm&gt;</span>
using namespace std<span class="sy0">;</span>
&nbsp;
<span class="kw4">int</span> main <span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#123;</span>
  <span class="kw4">int</span> numbers<span class="br0">&#91;</span><span class="br0">&#93;</span><span class="sy0">=</span><span class="br0">&#123;</span>20<span class="sy0">,</span>40<span class="sy0">,</span>50<span class="sy0">,</span>10<span class="sy0">,</span>30<span class="br0">&#125;</span><span class="sy0">;</span>
  sort <span class="br0">&#40;</span>numbers<span class="sy0">,</span> numbers<span class="sy0">+</span>5<span class="sy0">,</span> greater<span class="sy0">&lt;</span>int<span class="sy0">&gt;</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#41;</span><span class="sy0">;</span>
  <span class="kw1">for</span> <span class="br0">&#40;</span><span class="kw4">int</span> i<span class="sy0">=</span><span class="nu0">0</span><span class="sy0">;</span> i<span class="sy0">&lt;</span><span class="nu0">5</span><span class="sy0">;</span> i<span class="sy0">++</span><span class="br0">&#41;</span>
    <a href="http://www.opengroup.org/onlinepubs/009695399/functions/cout.html"><span class="kw3">cout</span></a> <span class="sy0">&lt;&lt;</span> numbers<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="sy0">&lt;&lt;</span> <span class="st0">&quot; &quot;</span><span class="sy0">;</span>
  <a href="http://www.opengroup.org/onlinepubs/009695399/functions/cout.html"><span class="kw3">cout</span></a> <span class="sy0">&lt;&lt;</span> endl<span class="sy0">;</span>
  <span class="kw1">return</span> <span class="nu0">0</span><span class="sy0">;</span>
<span class="br0">&#125;</span></pre>
<p>

Output:
</p>
<pre class="c code c++" style="font-family:monospace;"><span class="nu0">50</span> <span class="nu0">40</span> <span class="nu0">30</span> <span class="nu0">20</span> <span class="nu0">10</span></pre>
</div>
<!-- SECTION "**Members**" [961-] --></div>
</body>
</html>
