<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"
 lang="en" dir="ltr">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>stl:vector:erase</title>
<meta name="generator" content="DokuWiki Release 2009-12-25c &quot;Lemming&quot;" />
<meta name="robots" content="index,follow" />
<meta name="date" content="2010-01-04T10:33:37-0800" />
<meta name="keywords" content="stl,vector,erase" />
<link rel="search" type="application/opensearchdescription+xml" href="http://www.cppreference.com/wiki/lib/exe/opensearch.php" title="C++ Reference" />
<link rel="start" href="../../index.html" />
<link rel="contents" href="http://www.cppreference.com/wiki/stl/vector/erase?do=index" title="Index" />
<link rel="alternate" type="application/rss+xml" title="Recent Changes" href="http://www.cppreference.com/wiki/feed.php" />
<link rel="alternate" type="application/rss+xml" title="Current Namespace" href="http://www.cppreference.com/wiki/feed.php?mode=list&amp;ns=stl:vector" />
<link rel="alternate" type="text/html" title="Plain HTML" href="http://www.cppreference.com/wiki/_export/xhtml/stl/vector/erase" />
<link rel="alternate" type="text/plain" title="Wiki Markup" href="http://www.cppreference.com/wiki/_export/raw/stl/vector/erase" />
<link rel="canonical" href="erase" />
<link rel="stylesheet" media="all" type="text/css" href="../../lib/exe/css.php@s=all&amp;t=custom1&amp;tseed=1265723194" />
<link rel="stylesheet" media="screen" type="text/css" href="../../lib/exe/css.php@t=custom1&amp;tseed=1265723194" />
<link rel="stylesheet" media="print" type="text/css" href="../../lib/exe/css.php@s=print&amp;t=custom1&amp;tseed=1265723194" />
<script type="text/javascript" charset="utf-8" ><!--//--><![CDATA[//><!--
var NS='stl:vector';var JSINFO = {"id":"stl:vector:erase","namespace":"stl:vector"};
//--><!]]></script>
<script type="text/javascript" charset="utf-8" src="../../lib/exe/js.php@tseed=1265723194" ></script>
</head>
<body>
<div class="dokuwiki export">



<h2><a name="erase" id="erase">erase</a></h2>
<div class="level2">

<p>
Syntax:
</p>
<pre class="c code c++" style="font-family:monospace;">    <span class="co2">#include &lt;vector&gt;</span>
    iterator erase<span class="br0">&#40;</span> iterator loc <span class="br0">&#41;</span><span class="sy0">;</span>
    iterator erase<span class="br0">&#40;</span> iterator start<span class="sy0">,</span> iterator end <span class="br0">&#41;</span><span class="sy0">;</span></pre>
<p>
The erase() function either deletes the element at location loc, or deletes the
elements between start and end (including start but not including end). The
return value is the element after the last element erased.
</p>

<p>
The first version of erase (the version that deletes a single element at
location loc) runs in <a href="../../complexity" class="wikilink1" title="complexity">constant time</a> for lists and <a href="../../complexity" class="wikilink1" title="complexity">linear time</a> for vectors,
dequeues, and strings. The multiple-element version of erase always takes
<a href="../../complexity" class="wikilink1" title="complexity">linear time</a>.
</p>

<p>
For example:
</p>
<pre class="c code c++" style="font-family:monospace;">    <span class="co1">// Create a vector, load it with the first ten characters of the alphabet</span>
    vector<span class="sy0">&lt;</span>char<span class="sy0">&gt;</span> alphas<span class="sy0">;</span>
    <span class="kw1">for</span><span class="br0">&#40;</span> <span class="kw4">int</span> i<span class="sy0">=</span><span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> <span class="nu0">10</span><span class="sy0">;</span> i<span class="sy0">++</span> <span class="br0">&#41;</span> <span class="br0">&#123;</span>
      <span class="kw4">static</span> <span class="kw4">const</span> <span class="kw4">char</span> letters<span class="br0">&#91;</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="st0">&quot;ABCDEFGHIJ&quot;</span><span class="sy0">;</span>
      alphas.<span class="me1">push_back</span><span class="br0">&#40;</span> letters<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="br0">&#125;</span>
    vector<span class="sy0">&lt;</span>char<span class="sy0">&gt;::</span><span class="me2">size_type</span> size <span class="sy0">=</span> alphas.<span class="me1">size</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    vector<span class="sy0">&lt;</span>char<span class="sy0">&gt;::</span><span class="me2">iterator</span> startIterator<span class="sy0">;</span>
    vector<span class="sy0">&lt;</span>char<span class="sy0">&gt;::</span><span class="me2">iterator</span> tempIterator<span class="sy0">;</span>
    <span class="kw1">for</span><span class="br0">&#40;</span> vector<span class="sy0">&lt;</span>char<span class="sy0">&gt;::</span><span class="me2">size_type</span> i<span class="sy0">=</span><span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> size<span class="sy0">;</span> i<span class="sy0">++</span> <span class="br0">&#41;</span> <span class="br0">&#123;</span>
      startIterator <span class="sy0">=</span> alphas.<span class="me1">begin</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
      alphas.<span class="me1">erase</span><span class="br0">&#40;</span> startIterator <span class="br0">&#41;</span><span class="sy0">;</span>
      <span class="co1">// Display the vector</span>
      <span class="kw1">for</span><span class="br0">&#40;</span> tempIterator <span class="sy0">=</span> alphas.<span class="me1">begin</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span> tempIterator <span class="sy0">!=</span> alphas.<span class="me1">end</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span> <span class="sy0">++</span>tempIterator <span class="br0">&#41;</span> <span class="br0">&#123;</span>
        <a href="http://www.opengroup.org/onlinepubs/009695399/functions/cout.html"><span class="kw3">cout</span></a> <span class="sy0">&lt;&lt;</span> <span class="sy0">*</span>tempIterator<span class="sy0">;</span>
      <span class="br0">&#125;</span>
      <a href="http://www.opengroup.org/onlinepubs/009695399/functions/cout.html"><span class="kw3">cout</span></a> <span class="sy0">&lt;&lt;</span> endl<span class="sy0">;</span>
    <span class="br0">&#125;</span></pre>
<p>
That code would display the following output:
</p>
<pre class="code">
    BCDEFGHIJ
    CDEFGHIJ
    DEFGHIJ
    EFGHIJ
    FGHIJ
    GHIJ
    HIJ
    IJ
    J</pre>
<p>
In the next example, erase() is called with two iterators to delete a range of
elements from a vector:
</p>
<pre class="c code c++" style="font-family:monospace;">    <span class="co1">// create a vector, load it with the first ten characters of the alphabet</span>
    vector<span class="sy0">&lt;</span>char<span class="sy0">&gt;</span> alphas<span class="sy0">;</span>
    <span class="kw1">for</span><span class="br0">&#40;</span> <span class="kw4">int</span> i<span class="sy0">=</span><span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> <span class="nu0">10</span><span class="sy0">;</span> i<span class="sy0">++</span> <span class="br0">&#41;</span> <span class="br0">&#123;</span>
      <span class="kw4">static</span> <span class="kw4">const</span> <span class="kw4">char</span> letters<span class="br0">&#91;</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="st0">&quot;ABCDEFGHIJ&quot;</span><span class="sy0">;</span>
      alphas.<span class="me1">push_back</span><span class="br0">&#40;</span> letters<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="br0">&#125;</span>
    <span class="co1">// display the complete vector</span>
    <span class="kw1">for</span><span class="br0">&#40;</span> vector<span class="sy0">&lt;</span>char<span class="sy0">&gt;::</span><span class="me2">size_type</span> i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> alphas.<span class="me1">size</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span> i<span class="sy0">++</span> <span class="br0">&#41;</span> <span class="br0">&#123;</span>
      <a href="http://www.opengroup.org/onlinepubs/009695399/functions/cout.html"><span class="kw3">cout</span></a> <span class="sy0">&lt;&lt;</span> alphas<span class="br0">&#91;</span>i<span class="br0">&#93;</span><span class="sy0">;</span>
    <span class="br0">&#125;</span>
    <a href="http://www.opengroup.org/onlinepubs/009695399/functions/cout.html"><span class="kw3">cout</span></a> <span class="sy0">&lt;&lt;</span> endl<span class="sy0">;</span>
&nbsp;
    <span class="co1">// use erase to remove all but the first two and last three elements</span>
    <span class="co1">// of the vector</span>
    alphas.<span class="me1">erase</span><span class="br0">&#40;</span> alphas.<span class="me1">begin</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">+</span>2<span class="sy0">,</span> alphas.<span class="me1">end</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">-</span>3 <span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="co1">// display the modified vector</span>
    <span class="kw1">for</span><span class="br0">&#40;</span> vector<span class="sy0">&lt;</span>char<span class="sy0">&gt;::</span><span class="me2">size_type</span> i <span class="sy0">=</span> <span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> alphas.<span class="me1">size</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span> i<span class="sy0">++</span> <span class="br0">&#41;</span> <span class="br0">&#123;</span>
      <a href="http://www.opengroup.org/onlinepubs/009695399/functions/cout.html"><span class="kw3">cout</span></a> <span class="sy0">&lt;&lt;</span> alphas<span class="br0">&#91;</span>i<span class="br0">&#93;</span><span class="sy0">;</span>
    <span class="br0">&#125;</span>
    <a href="http://www.opengroup.org/onlinepubs/009695399/functions/cout.html"><span class="kw3">cout</span></a> <span class="sy0">&lt;&lt;</span> endl<span class="sy0">;</span></pre>
<p>

When run, the above code displays:
</p>
<pre class="code">
    ABCDEFGHIJ
    ABHIJ</pre>
<p>
<strong>With all container types you have to be careful when inserting or erasing elements, since it may lead to invalid iterators.</strong>
</p>

<p>
Here is an example that works for std::vector. Especially, vector::erase() invalidates all iterators (and pointers) following the element to be erased. The example erases some elements depending on a condition (it will erase the letters B and D).
</p>
<pre class="c code c++" style="font-family:monospace;"><span class="co2">#include &lt;iostream&gt;</span>
<span class="co2">#include &lt;vector&gt;</span>
<span class="co2">#include &lt;iterator&gt;</span>
&nbsp;
using namespace std<span class="sy0">;</span>
&nbsp;
<span class="kw4">int</span> main<span class="br0">&#40;</span><span class="br0">&#41;</span>
<span class="br0">&#123;</span>
    vector<span class="sy0">&lt;</span>char<span class="sy0">&gt;</span> alphas<span class="sy0">;</span>
    <span class="kw1">for</span><span class="br0">&#40;</span> <span class="kw4">int</span> i<span class="sy0">=</span><span class="nu0">0</span><span class="sy0">;</span> i <span class="sy0">&lt;</span> <span class="nu0">10</span><span class="sy0">;</span> i<span class="sy0">++</span> <span class="br0">&#41;</span> <span class="br0">&#123;</span>
      <span class="kw4">static</span> <span class="kw4">const</span> <span class="kw4">char</span> letters<span class="br0">&#91;</span><span class="br0">&#93;</span> <span class="sy0">=</span> <span class="st0">&quot;ABCDEFGHIJ&quot;</span><span class="sy0">;</span>
      alphas.<span class="me1">push_back</span><span class="br0">&#40;</span> letters<span class="br0">&#91;</span>i<span class="br0">&#93;</span> <span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="br0">&#125;</span>
&nbsp;
    vector<span class="sy0">&lt;</span>char<span class="sy0">&gt;::</span><span class="me2">iterator</span> iter <span class="sy0">=</span> alphas.<span class="me1">begin</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    <span class="kw1">while</span><span class="br0">&#40;</span> iter <span class="sy0">!=</span> alphas.<span class="me1">end</span><span class="br0">&#40;</span><span class="br0">&#41;</span> <span class="br0">&#41;</span>
    <span class="br0">&#123;</span>
      <span class="kw1">if</span> <span class="br0">&#40;</span><span class="sy0">*</span>iter <span class="sy0">==</span> <span class="st0">'B'</span> <span class="sy0">||</span> <span class="sy0">*</span>iter <span class="sy0">==</span> <span class="st0">'D'</span><span class="br0">&#41;</span>
        iter <span class="sy0">=</span> alphas.<span class="me1">erase</span><span class="br0">&#40;</span> iter <span class="br0">&#41;</span><span class="sy0">;</span>
      <span class="kw1">else</span>
        <span class="sy0">++</span>iter<span class="sy0">;</span>
    <span class="br0">&#125;</span>
&nbsp;
    copy<span class="br0">&#40;</span>alphas.<span class="me1">begin</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">,</span> alphas.<span class="me1">end</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="sy0">,</span> ostream_iterator<span class="sy0">&lt;</span>char<span class="sy0">&gt;</span><span class="br0">&#40;</span><a href="http://www.opengroup.org/onlinepubs/009695399/functions/cout.html"><span class="kw3">cout</span></a><span class="sy0">,</span> <span class="st0">&quot;&quot;</span><span class="br0">&#41;</span><span class="br0">&#41;</span><span class="sy0">;</span>
    <a href="http://www.opengroup.org/onlinepubs/009695399/functions/cout.html"><span class="kw3">cout</span></a> <span class="sy0">&lt;&lt;</span> endl<span class="sy0">;</span>
&nbsp;
<span class="br0">&#125;</span></pre>
<p>
When run, the above code displays:
</p>
<pre class="code">
    ACEFGHIJ</pre>
<p>

Related Topics: <a href="clear" class="wikilink1" title="stl:vector:clear">clear</a>, <a href="insert" class="wikilink1" title="stl:vector:insert">insert</a>, <a href="pop_back" class="wikilink1" title="stl:vector:pop_back">pop_back</a>
</p>

</div>
<!-- SECTION "erase" [3-] --></div>
</body>
</html>
