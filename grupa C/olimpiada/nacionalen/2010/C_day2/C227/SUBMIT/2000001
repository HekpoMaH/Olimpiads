#include <cstdio>
#include <queue>
#include <utility>
using namespace std;
typedef pair<int, int> pii;
typedef unsigned int u;
const int MAXN = 1 << 6;
const int MAXG = 8;
pii d[4] = {pii(-1, 0), pii(0, 1), pii(1, 0), pii(0, -1)};
int n;
int m;
char map[MAXN][MAXN];
bool used[MAXN][MAXN];
int step[MAXG][MAXN][MAXN];

int cnt_g;
pii g[MAXG];
pii E;
pii ex;

pii operator+(pii &a, pii &b) {
	return pii(a.first + b.first, a.second + b.second);
}

pii get(pii coor, int &dir) {
	coor = coor + d[dir];
	if (coor.first == -1)
		coor.first = n - 1;
	if (coor.first == n)
		coor.first = 0;
	if (coor.second == -1)
		coor.second = m - 1;
	if (coor.second == m)
		coor.second = 0;
	return coor;
}

void bfs(pii &start, int ind) {
	queue<pii> que;
	que.push(start);
	for (int i = 0;i < n; ++i) {
		for (int j = 0;j < m; ++j) {
			used[i][j] = 0;
		}
	}
	used[start.first][start.second] = 1;
	pii top;
	pii nw;
	while (!que.empty()) {
		top = que.front(); que.pop();
		for (int i = 0;i < 4; ++i) {
			nw = get(top, i);
			if (map[nw.first][nw.second] != '#' && !used[nw.first][nw.second]) {
				used[nw.first][nw.second] = 1;
				step[ind][nw.first][nw.second] = step[ind][top.first][top.second] + 1;
				que.push(nw);
			}
		}
	}
}

int cnt;
int gays[MAXG];
int ans;

void full() {
	bool here = false;
	bool none = true;
	for (int i = 0;i < cnt_g; ++i) {
		here = false;
		for (int j = 0;j < cnt; ++j) {
			if (gays[j] == i) {
				here = true;
			}
		}
		if (!here) {
			gays[cnt++] = i;
			full();
			cnt--;
			none = false;
		}
	}
	if (cnt == cnt_g) {
		int cur = step[7][g[gays[0]].first][g[gays[0]].second];
		for (int i = 1;i < cnt_g; ++i) {
			cur += step[gays[i - 1]][g[gays[i]].first][g[gays[i]].second];
		}
		cur += step[gays[cnt - 1]][ex.first][ex.second];
		if (cur < ans) ans = cur;
	}
}

int main() {
	scanf("%d %d", &n, &m);
	for (int i = 0;i < n; ++i) {
		scanf("%s", map[i]);
		for (int j = 0;j < m; ++j) {
			if (map[i][j] == 'E') {
				E = pii(i, j);
			} else if (map[i][j] == 'P') {
				g[cnt_g++] = pii(i, j);
			} else if (map[i][j] == 'X') {
				ex = pii(i, j);
			}
		}
	}
	bfs(E, 7);
	for (int i = 0;i < cnt_g; ++i) {
		bfs(g[i], i);
	}
	if (step[7][ex.first][ex.second] == 0) {
		puts("-1");
		return 0;
	}
	for (int i = 0;i < cnt_g; ++i) {
		if (step[7][g[i].first][g[i].second] == 0) {
			puts("-1");
			return 0;
		}
	}
	ans = 100000;
	full();
	printf("%d\n", ans);
	return 0;
}
