/*

  Условие:
  По автобусна линия цената между две съседни спирки е 1 лев. Линията е разделена на маршрути
  от по няколко съседни спирки, които имат също цена. 
  Да се намери за колко лв най-малко може да се стигне от спирка А до спирка В.
  Маршрутите не се пресичат.
  Вход: N A B - броя на маршрутите, номер на начална и крайна спирка (А<>B)
        p1 q2 s1 - N реда с описание на маршрута: начална и крайна спирка и стойността на билета
        - - - - 
        pN qN sN
  Изход: Минималната сума

Пример:
------
Вход:
4 8 28
22 30 5
18 22 3
1 8 6
8 18 7
Изход:
15

*/

#include <iostream>
#include <algorithm>
#include<vector>
using namespace std;

struct Blok {
   int t1, t2, st;
};

int n,A,B,i;
vector <Blok> v;

bool fff (Blok a, Blok b) {
   return (a.t1<b.t1); 
}

int main(){
int t1,t2,Nom1=-1, Nom2=-2,Sum;    
bool fl;
    cin>>n>>A>>B;
    v.resize(n);
    for (i=0; i<n;i++) {
     cin>>v[i].t1>>v[i].t2>>v[i].st;
    }
    sort(v.begin(),v.end(),fff);
    for (i=0; i<n;i++) {
     if (v[i].t1<=A&&A<=v[i].t2) Nom1=i;
     if (v[i].t1<=B&&B<=v[i].t2) Nom2=i;
    }
    if (Nom1==Nom2) Sum=B-A;
    else {
     Sum=0;
     for (i=Nom1+1;i<=Nom2-1;i++)
      Sum=Sum+v[i].st;
     Sum=Sum+min(v[Nom1].t2-A,v[Nom1].st)+min(B-v[Nom2].t1,v[Nom2].st);    
    } 
     cout<<Sum<<endl;      
    system ("pause");
	return 0;
}

/*

// Отг: 21          1
4 1 30
22 30 5
18 22 3
1 8 6
8 18 7

// Отг: 18          2
4 5 30
22 30 5
18 22 3
1 8 6
8 18 7

// Отг: 17          3
4 1 23
22 30 5
18 22 3
1 8 6
8 18 7

// Отг: 10          4
4 10 21
22 30 5
18 22 3
1 8 6
8 18 7

// Отг: 5           5
4 16 21
22 30 5
18 22 3
1 8 6
8 18 7

// Отг: 10          6
4 9 21
22 30 5
18 22 3
1 8 6
8 18 7

// Отг: 3           7
4 16 19
22 30 5
18 22 3
1 8 6
8 18 7

// Отг: 1           8
4 9 10
22 30 5
18 22 3
1 8 6
8 18 7

// Отг: 7           9
4 8 18
22 30 5
18 22 3
1 8 6
8 18 7

// Отг: 10         10
4 5 18
22 30 5
18 22 3
1 8 6
8 18 7

// Отг: 14          0
4 8 28
22 30 5
18 22 2
1 8 6
8 18 7

*/
