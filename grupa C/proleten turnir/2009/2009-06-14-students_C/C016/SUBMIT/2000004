#include<algorithm>
#include<vector>
#include<cstdio>
int n,l,ans,length;
int p[1<<7],r[1<<7],q[1<<7],f[1<<7],c[1<<7];
std::vector<int> v;
int max(int a,int b)
{
    return a<b?b:a;
}
inline bool ms(int a,int b)
{
    return q[a]>q[b];
}
inline bool final(int a,int b)
{
    int k1=c[a]-length+l<r[a]?p[a]:q[a];
    int k2=c[b]-length+l<r[b]?p[b]:q[b];
    return c[a]*q[a]-max((c[a]-length+l)*k1,0)>c[b]*q[b]-max((c[b]-length+l)*k2,0);
}
int main()
{
    scanf("%d%d",&n,&l);
    for(int i=0;i<n;++i)
    {
        scanf("%d%d%d%d",p+i,r+i,q+i,f+i);
        ans+=q[i]*f[i];
        length+=f[i];
        v.push_back(i);
        c[i]=f[i];
    }
    if(length>=l)
    {
        std::sort(v.begin(),v.end(),ms);
        for(int i=0;i<v.size();++i)
        {
            length-=length-l<f[v[i]]-r[v[i]]?length-l:f[v[i]]-r[v[i]];
            c[i]-=length-l<f[v[i]]-r[v[i]]?length-l:f[v[i]]-r[v[i]];
            ans-=q[v[i]]*(length-l<f[v[i]]-r[v[i]]?length-l:f[v[i]]-r[v[i]]);
        }
        int lans=ans;
        for(int i=0;i<v.size();++i)
        {
            std::sort(v.begin(),v.end(),final);
            int k=c[v[0]]-length+l<r[v[0]]?p[v[0]]:q[v[0]];
            ans-=c[v[0]]*q[v[0]]-max((c[v[0]]-length+l)*k,0);
            length-=c[v[0]]-max(c[v[0]]-length+l,0);
            c[i]-=c[v[0]]-max(c[v[0]]-length+l,0);
            if(ans==lans)break;
            lans=ans;
        }
        printf("%d\n",ans);
    }else puts("-1");
    return 0;
}
