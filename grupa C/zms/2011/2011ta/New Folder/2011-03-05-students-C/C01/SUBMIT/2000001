#include <iostream>
#include <vector>
#include <queue>

using namespace std;

vector <int> g[1010];
queue <int> q;
int room[1010][1010];
int room1[1000010];
int number[1010][1010];
int n,k;
int runaway[10010];
int beg;
int d1[] = {-1,0,0,1};
int d2[] = {0,-1,1,0};
bool used[1010][1010];
int mnbr[1000010];

bool has (int x)
{
    for (int i = 0; i < n; i ++){
        for (int j = 0; j < n; j ++){
            if (x == room[i][j]) return true;
        }
    }
    return false;
}

bool valid (int x,int y)
{
    if (x >= 0 && x < n && y >= 0 && y < n) return true;
    return false;
}

int bfs(int r)
{
    q.push(n);
    mnbr[n] = 0;
    if (n == r) return 0;
    int br = 0;
    //cout << room1[q.front()] << endl;
    while (room1[q.front()] != r && br <= n * n){
        br = mnbr[q.front()];
        for (int i = 0; i < g[q.front()].size(); i ++){
            if (br + 1 < mnbr[g[q.front()][i]]){
                mnbr[g[q.front()][i]] = br + 1;
                q.push(g[q.front()][i]);
            }
        }
        q.pop();
    }
    if (mnbr[q.front()] == 99999999) return -1;
    return mnbr[q.front()];
}

int main()
{
    cin >> n;
    int num = 1;
    for (int i = 0; i < n; i ++){
        for (int j = 0; j < n; j ++){
            cin >> room[i][j];
            number[i][j] = num;
            room1[num] = room[i][j];
            num ++;
        }
    }
    for (int i = 0; i < n; i ++){
        for (int j = 0; j < n; j ++){
            for (int u = 0; u < 4; u ++){
                if (valid(i + d1[u],j + d2[u]) == true){
                    g[number[i][j]].push_back(number[i + d1[u]][j + d2[u]]);
                }
            }
        }
    }
    /*cout << n * n << endl;
    for (int i = 1; i <= n * n; i ++){
        //cout << i << " --> ";
        for (int j = 0; j < g[i].size(); j ++){
            //cout << g[i][j] << " ";
        }
        cout << endl;
    }*/
    cin >> k;
    for (int i = 0; i < k; i ++){
        cin >> runaway[i];
    }
    for (int i = 0; i < k; i ++){
        //cout << runaway[i] << " ";
        for (int j = 0; j < n * n; j ++){
            mnbr[j] = 99999999;
        }
        while (q.size() > 0) q.pop();
        if (has (runaway[i]) == true) cout << bfs(runaway[i]) << endl;
        else cout << "No Solution" << endl;
    }
    beg = room[0][n - 1];
    //cout << beg << endl;
    return 0;
}
/*
4
1 2 3 4
2 3 4 5
4 5 6 7
7 8 9 9
5
3 4 10 8 7
*/
