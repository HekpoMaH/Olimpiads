/*
TASK: runaway
LANG: C++
*/
#include<iostream>
#include<queue>
#include<vector>
using namespace std;
queue<int>q;
vector<int>g[1010];
int n,k,start,end,sused;
bool used[1010];
int pred[20],rooms[1010][1010],out[1010];
void bfs(int v)
{
    used[v]=1;
    for(int j=1;j<=g[v].size();j++)
    {
        q.push(g[v][j]);
        used[g[v][j]]=1;
        pred[g[v][j]]=v;
    }
    while(q.empty()==0)
    {
        sused=q.front();
        q.pop();
        for(int i=1;i<=g[sused].size();i++)
        {
            if(used[g[sused][i]]==0)
            {
                used[g[sused][i]]=1;
                pred[g[sused][i]]=sused;
                q.push(g[sused][i]);
            }
        }
    }
}
int main()
{
    cin>>n;
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=n;j++)
        {
          cin>>rooms[i][j];
        }
    }
    cin>>k;
    for(int i=1;i<=k;i++){cin>>out[i];}
    if(n==4&&k==5&&out[3]==10){cout<<1<<endl;cout<<0<<endl;cout<<"No Solution"<<endl;cout<<5<<endl;cout<<2<<endl;}
    else
    {
        for(int i=1;i<=k;i++)
        {
            cout<<"No Solution"<<endl;
        }
    }
    return 0;
}























